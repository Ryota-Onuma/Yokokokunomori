<!DOCTYPE html>
<!-- saved from url=(0034)http://localhost:3000/lectures/new -->
<html lang="en" data-inboxsdk-session-id="1556791692192-0.8109411344444297"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Action Controller: Exception caught</title>
  <style>
    body {
      background-color: #FAFAFA;
      color: #333;
      margin: 0px;
    }

    body, p, ol, ul, td {
      font-family: helvetica, verdana, arial, sans-serif;
      font-size:   13px;
      line-height: 18px;
    }

    pre {
      font-size: 11px;
      white-space: pre-wrap;
    }

    pre.box {
      border: 1px solid #EEE;
      padding: 10px;
      margin: 0px;
      width: 958px;
    }

    header {
      color: #F0F0F0;
      background: #C52F24;
      padding: 0.5em 1.5em;
    }

    h1 {
      margin: 0.2em 0;
      line-height: 1.1em;
      font-size: 2em;
    }

    h2 {
      color: #C52F24;
      line-height: 25px;
    }

    .details {
      border: 1px solid #D0D0D0;
      border-radius: 4px;
      margin: 1em 0px;
      display: block;
      width: 978px;
    }

    .summary {
      padding: 8px 15px;
      border-bottom: 1px solid #D0D0D0;
      display: block;
    }

    .details pre {
      margin: 5px;
      border: none;
    }

    #container {
      box-sizing: border-box;
      width: 100%;
      padding: 0 1.5em;
    }

    .source * {
      margin: 0px;
      padding: 0px;
    }

    .source {
      border: 1px solid #D9D9D9;
      background: #ECECEC;
      width: 978px;
    }

    .source pre {
      padding: 10px 0px;
      border: none;
    }

    .source .data {
      font-size: 80%;
      overflow: auto;
      background-color: #FFF;
    }

    .info {
      padding: 0.5em;
    }

    .source .data .line_numbers {
      background-color: #ECECEC;
      color: #AAA;
      padding: 1em .5em;
      border-right: 1px solid #DDD;
      text-align: right;
    }

    .line {
      padding-left: 10px;
      white-space: pre;
    }

    .line:hover {
      background-color: #F6F6F6;
    }

    .line.active {
      background-color: #FFCCCC;
    }

    .hidden {
      display: none;
    }

    a { color: #980905; }
    a:visited { color: #666; }
    a.trace-frames { color: #666; }
    a:hover { color: #C52F24; }
    a.trace-frames.selected { color: #C52F24 }

    
  </style>

  <script>
    var toggle = function(id) {
      var s = document.getElementById(id).style;
      s.display = s.display == 'none' ? 'block' : 'none';
      return false;
    }
    var show = function(id) {
      document.getElementById(id).style.display = 'block';
    }
    var hide = function(id) {
      document.getElementById(id).style.display = 'none';
    }
    var toggleTrace = function() {
      return toggle('blame_trace');
    }
    var toggleSessionDump = function() {
      return toggle('session_dump');
    }
    var toggleEnvDump = function() {
      return toggle('env_dump');
    }
  </script>
<style type="text/css" id="sr02459pvbvrmhco">.console .pos-absolute { position: absolute; }
.console .pos-fixed { position: fixed; }
.console .pos-right { right: 0; }
.console .border-box { box-sizing: border-box; }
.console .layer { width: 100%; height: 100%; }
.console .layer.console-outer { z-index: 1; }
.console .layer.resizer { z-index: 2; }
.console { position: fixed; left: 0; bottom: 0; width: 100%; height: 148px; padding: 0; margin: 0; background: none repeat scroll 0% 0% #333; z-index: 9999; }
.console .console-outer { overflow: auto; padding-top: 4px; }
.console .console-inner { font-family: monospace; font-size: 11px; width: 100%; height: 100%; overflow: none; background: #333; }
.console .console-prompt-box { color: #FFF; }
.console .console-message { color: #1AD027; margin: 0; border: 0; white-space: pre-wrap; background-color: #333; padding: 0; }
.console .console-message.error-message { color: #FC9; }
.console .console-message.notification-message { color: #99F; }
.console .console-message.auto-complete { word-break: break-all; }
.console .console-message.auto-complete .keyword { margin-right: 11px; }
.console .console-message.auto-complete .keyword.selected { background: #FFF; color: #000; }
.console .console-message.auto-complete .hidden { display: none; }
.console .console-message.auto-complete .trimmed { display: none; }
.console .console-hint { color: #096; }
.console .console-focus .console-cursor { background: #FEFEFE; color: #333; font-weight: bold; }
.console .resizer { background: #333; width: 100%; height: 4px; cursor: ns-resize; }
.console .console-actions { padding-right: 3px; }
.console .console-actions .button { float: left; }
.console .button { cursor: pointer; border-radius: 1px; font-family: monospace; font-size: 13px; width: 14px; height: 14px; line-height: 14px; text-align: center; color: #CCC; }
.console .button:hover { background: #666; color: #FFF; }
.console .button.close-button:hover { background: #966; }
.console .clipboard { height: 0px; padding: 0px; margin: 0px; width: 0px; margin-left: -1000px; }
.console .console-prompt-label { display: inline; color: #FFF; background: none repeat scroll 0% 0% #333; border: 0; padding: 0; }
.console .console-prompt-display { display: inline; color: #FFF; background: none repeat scroll 0% 0% #333; border: 0; padding: 0; }
.console.full-screen { height: 100%; }
.console.full-screen .console-outer { padding-top: 3px; }
.console.full-screen .resizer { display: none; }
.console.full-screen .close-button { display: none; }
</style></head>
<body cz-shortcut-listen="true" style="">

<header>
  <h1>
    Sass::SyntaxError in
    Lectures#new
  </h1>
</header>

<div id="container" style="margin-bottom: 148px;">
  <p>
    Showing <i>/Users/ryota/Desktop/ynutree2/app/views/lectures/new.html.erb</i> where line <b>#2</b> raised:
  </p>
  <pre><code>wrong number of arguments (given 4, expected 1..3) for `rgb'</code></pre>

      <div class="source " id="frame-source-0">
      <div class="info">
        Extracted source (around line <strong>#115</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>113</span>
<span>114</span>
<span>115</span>
<span>116</span>
<span>117</span>
<span>118</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  border: 1px solid black;
</div><div class="line">  padding: 10px 15px;
</div><div class="line active">  background-color: rgb(3,0,139,0.8);
</div><div class="line">  color: white;
</div><div class="line">  z-index: 2;
</div><div class="line">  font-size: 1.5em;
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-1">
      <div class="info">
        Extracted source (around line <strong>#311</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>309</span>
<span>310</span>
<span>311</span>
<span>312</span>
<span>313</span>
<span>314</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        raise e
</div><div class="line">      end
</div><div class="line active">      raise Sass::SyntaxError.new("#{message} for `#{name}'")
</div><div class="line">    end
</div><div class="line">  end
</div><div class="line">end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-2">
      <div class="info">
        Extracted source (around line <strong>#158</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>156</span>
<span>157</span>
<span>158</span>
<span>159</span>
<span>160</span>
<span>161</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      end
</div><div class="line">    rescue ArgumentError =&gt; e
</div><div class="line active">      reformat_argument_error(e)
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Compass historically overrode this before it changed name to {Funcall#to_value}.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-3">
      <div class="info">
        Extracted source (around line <strong>#128</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>126</span>
<span>127</span>
<span>128</span>
<span>129</span>
<span>130</span>
<span>131</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @raise [Sass::SyntaxError] if the function call raises an ArgumentError
</div><div class="line">    def _perform(environment)
</div><div class="line active">      args = @args.each_with_index.
</div><div class="line">        map {|a, i| perform_arg(a, environment, signature &amp;&amp; signature.args[i])}
</div><div class="line">      keywords = Sass::Util.map_hash(@keywords) do |k, v|
</div><div class="line">        [k, perform_arg(v, environment, k.tr('-', '_'))]
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-4">
      <div class="info">
        Extracted source (around line <strong>#50</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>48</span>
<span>49</span>
<span>50</span>
<span>51</span>
<span>52</span>
<span>53</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @return [Sass::Script::Value] The SassScript object that is the value of the SassScript
</div><div class="line">    def perform(environment)
</div><div class="line active">      _perform(environment)
</div><div class="line">    rescue Sass::SyntaxError =&gt; e
</div><div class="line">      e.modify_backtrace(:line =&gt; line)
</div><div class="line">      raise e
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-5">
      <div class="info">
        Extracted source (around line <strong>#398</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>396</span>
<span>397</span>
<span>398</span>
<span>399</span>
<span>400</span>
<span>401</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # source range from evaluating it.
</div><div class="line">    if node.value.length == 1 &amp;&amp; node.value.first.is_a?(Sass::Script::Tree::Node)
</div><div class="line active">      result = node.value.first.perform(@environment)
</div><div class="line">      node.resolved_value = result.to_s
</div><div class="line">      node.value_source_range = result.source_range if result.source_range
</div><div class="line">    elsif node.custom_property?
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-6">
      <div class="info">
        Extracted source (around line <strong>#36</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
<span>39</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def visit(node)
</div><div class="line">      if respond_to?(node.class.visit_method, true)
</div><div class="line active">        send(node.class.visit_method, node) {visit_children(node)}
</div><div class="line">      else
</div><div class="line">        visit_children(node)
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-7">
      <div class="info">
        Extracted source (around line <strong>#158</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>156</span>
<span>157</span>
<span>158</span>
<span>159</span>
<span>160</span>
<span>161</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  def visit(node)
</div><div class="line">    return super(node.dup) unless @environment
</div><div class="line active">    @environment.stack.with_base(node.filename, node.line) {super(node.dup)}
</div><div class="line">  rescue Sass::SyntaxError =&gt; e
</div><div class="line">    e.modify_backtrace(:filename =&gt; node.filename, :line =&gt; node.line)
</div><div class="line">    raise e
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-8">
      <div class="info">
        Extracted source (around line <strong>#79</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>77</span>
<span>78</span>
<span>79</span>
<span>80</span>
<span>81</span>
<span>82</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @yield [] A block in which the new frame is on the stack.
</div><div class="line">    def with_base(filename, line)
</div><div class="line active">      with_frame(filename, line, :base) {yield}
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Pushes an import frame onto the stack.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-9">
      <div class="info">
        Extracted source (around line <strong>#135</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>133</span>
<span>134</span>
<span>135</span>
<span>136</span>
<span>137</span>
<span>138</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      @frames.pop if @frames.last &amp;&amp; @frames.last.type == :base
</div><div class="line">      @frames.push(Frame.new(filename, line, type, name))
</div><div class="line active">      yield
</div><div class="line">    ensure
</div><div class="line">      @frames.pop unless type == :base &amp;&amp; @frames.last &amp;&amp; @frames.last.type != :base
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-10">
      <div class="info">
        Extracted source (around line <strong>#79</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>77</span>
<span>78</span>
<span>79</span>
<span>80</span>
<span>81</span>
<span>82</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @yield [] A block in which the new frame is on the stack.
</div><div class="line">    def with_base(filename, line)
</div><div class="line active">      with_frame(filename, line, :base) {yield}
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Pushes an import frame onto the stack.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-11">
      <div class="info">
        Extracted source (around line <strong>#158</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>156</span>
<span>157</span>
<span>158</span>
<span>159</span>
<span>160</span>
<span>161</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  def visit(node)
</div><div class="line">    return super(node.dup) unless @environment
</div><div class="line active">    @environment.stack.with_base(node.filename, node.line) {super(node.dup)}
</div><div class="line">  rescue Sass::SyntaxError =&gt; e
</div><div class="line">    e.modify_backtrace(:filename =&gt; node.filename, :line =&gt; node.line)
</div><div class="line">    raise e
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-12">
      <div class="info">
        Extracted source (around line <strong>#440</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>438</span>
<span>439</span>
<span>440</span>
<span>441</span>
<span>442</span>
<span>443</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      with_environment Sass::Environment.new(@environment, node.options) do
</div><div class="line">        @environment.selector = node.resolved_rules
</div><div class="line active">        node.children = node.children.map {|c| visit(c)}.flatten
</div><div class="line">      end
</div><div class="line">      node
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-13">
      <div class="info">
        Extracted source (around line <strong>#440</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>438</span>
<span>439</span>
<span>440</span>
<span>441</span>
<span>442</span>
<span>443</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      with_environment Sass::Environment.new(@environment, node.options) do
</div><div class="line">        @environment.selector = node.resolved_rules
</div><div class="line active">        node.children = node.children.map {|c| visit(c)}.flatten
</div><div class="line">      end
</div><div class="line">      node
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-14">
      <div class="info">
        Extracted source (around line <strong>#440</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>438</span>
<span>439</span>
<span>440</span>
<span>441</span>
<span>442</span>
<span>443</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      with_environment Sass::Environment.new(@environment, node.options) do
</div><div class="line">        @environment.selector = node.resolved_rules
</div><div class="line active">        node.children = node.children.map {|c| visit(c)}.flatten
</div><div class="line">      end
</div><div class="line">      node
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-15">
      <div class="info">
        Extracted source (around line <strong>#179</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>177</span>
<span>178</span>
<span>179</span>
<span>180</span>
<span>181</span>
<span>182</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  def with_environment(env)
</div><div class="line">    old_env, @environment = @environment, env
</div><div class="line active">    yield
</div><div class="line">  ensure
</div><div class="line">    @environment = old_env
</div><div class="line">  end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-16">
      <div class="info">
        Extracted source (around line <strong>#438</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>436</span>
<span>437</span>
<span>438</span>
<span>439</span>
<span>440</span>
<span>441</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        @environment.selector, !old_at_root_without_rule)
</div><div class="line">      node.stack_trace = @environment.stack.to_s if node.options[:trace_selectors]
</div><div class="line active">      with_environment Sass::Environment.new(@environment, node.options) do
</div><div class="line">        @environment.selector = node.resolved_rules
</div><div class="line">        node.children = node.children.map {|c| visit(c)}.flatten
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-17">
      <div class="info">
        Extracted source (around line <strong>#36</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
<span>39</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def visit(node)
</div><div class="line">      if respond_to?(node.class.visit_method, true)
</div><div class="line active">        send(node.class.visit_method, node) {visit_children(node)}
</div><div class="line">      else
</div><div class="line">        visit_children(node)
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-18">
      <div class="info">
        Extracted source (around line <strong>#158</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>156</span>
<span>157</span>
<span>158</span>
<span>159</span>
<span>160</span>
<span>161</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  def visit(node)
</div><div class="line">    return super(node.dup) unless @environment
</div><div class="line active">    @environment.stack.with_base(node.filename, node.line) {super(node.dup)}
</div><div class="line">  rescue Sass::SyntaxError =&gt; e
</div><div class="line">    e.modify_backtrace(:filename =&gt; node.filename, :line =&gt; node.line)
</div><div class="line">    raise e
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-19">
      <div class="info">
        Extracted source (around line <strong>#79</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>77</span>
<span>78</span>
<span>79</span>
<span>80</span>
<span>81</span>
<span>82</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @yield [] A block in which the new frame is on the stack.
</div><div class="line">    def with_base(filename, line)
</div><div class="line active">      with_frame(filename, line, :base) {yield}
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Pushes an import frame onto the stack.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-20">
      <div class="info">
        Extracted source (around line <strong>#135</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>133</span>
<span>134</span>
<span>135</span>
<span>136</span>
<span>137</span>
<span>138</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      @frames.pop if @frames.last &amp;&amp; @frames.last.type == :base
</div><div class="line">      @frames.push(Frame.new(filename, line, type, name))
</div><div class="line active">      yield
</div><div class="line">    ensure
</div><div class="line">      @frames.pop unless type == :base &amp;&amp; @frames.last &amp;&amp; @frames.last.type != :base
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-21">
      <div class="info">
        Extracted source (around line <strong>#79</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>77</span>
<span>78</span>
<span>79</span>
<span>80</span>
<span>81</span>
<span>82</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @yield [] A block in which the new frame is on the stack.
</div><div class="line">    def with_base(filename, line)
</div><div class="line active">      with_frame(filename, line, :base) {yield}
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Pushes an import frame onto the stack.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-22">
      <div class="info">
        Extracted source (around line <strong>#158</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>156</span>
<span>157</span>
<span>158</span>
<span>159</span>
<span>160</span>
<span>161</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  def visit(node)
</div><div class="line">    return super(node.dup) unless @environment
</div><div class="line active">    @environment.stack.with_base(node.filename, node.line) {super(node.dup)}
</div><div class="line">  rescue Sass::SyntaxError =&gt; e
</div><div class="line">    e.modify_backtrace(:filename =&gt; node.filename, :line =&gt; node.line)
</div><div class="line">    raise e
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-23">
      <div class="info">
        Extracted source (around line <strong>#52</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>50</span>
<span>51</span>
<span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @return [Array&lt;Object&gt;] The return values of the `visit_*` methods for the children.
</div><div class="line">    def visit_children(parent)
</div><div class="line active">      parent.children.map {|c| visit(c)}
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Returns the name of a node as used in the `visit_*` method.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-24">
      <div class="info">
        Extracted source (around line <strong>#52</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>50</span>
<span>51</span>
<span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @return [Array&lt;Object&gt;] The return values of the `visit_*` methods for the children.
</div><div class="line">    def visit_children(parent)
</div><div class="line active">      parent.children.map {|c| visit(c)}
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Returns the name of a node as used in the `visit_*` method.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-25">
      <div class="info">
        Extracted source (around line <strong>#52</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>50</span>
<span>51</span>
<span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @return [Array&lt;Object&gt;] The return values of the `visit_*` methods for the children.
</div><div class="line">    def visit_children(parent)
</div><div class="line active">      parent.children.map {|c| visit(c)}
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Returns the name of a node as used in the `visit_*` method.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-26">
      <div class="info">
        Extracted source (around line <strong>#167</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>165</span>
<span>166</span>
<span>167</span>
<span>168</span>
<span>169</span>
<span>170</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  def visit_children(parent)
</div><div class="line">    with_environment Sass::Environment.new(@environment, parent.options) do
</div><div class="line active">      parent.children = super.flatten
</div><div class="line">      parent
</div><div class="line">    end
</div><div class="line">  end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-27">
      <div class="info">
        Extracted source (around line <strong>#179</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>177</span>
<span>178</span>
<span>179</span>
<span>180</span>
<span>181</span>
<span>182</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  def with_environment(env)
</div><div class="line">    old_env, @environment = @environment, env
</div><div class="line active">    yield
</div><div class="line">  ensure
</div><div class="line">    @environment = old_env
</div><div class="line">  end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-28">
      <div class="info">
        Extracted source (around line <strong>#166</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>164</span>
<span>165</span>
<span>166</span>
<span>167</span>
<span>168</span>
<span>169</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  # Keeps track of the current environment.
</div><div class="line">  def visit_children(parent)
</div><div class="line active">    with_environment Sass::Environment.new(@environment, parent.options) do
</div><div class="line">      parent.children = super.flatten
</div><div class="line">      parent
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-29">
      <div class="info">
        Extracted source (around line <strong>#36</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
<span>39</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def visit(node)
</div><div class="line">      if respond_to?(node.class.visit_method, true)
</div><div class="line active">        send(node.class.visit_method, node) {visit_children(node)}
</div><div class="line">      else
</div><div class="line">        visit_children(node)
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-30">
      <div class="info">
        Extracted source (around line <strong>#186</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>184</span>
<span>185</span>
<span>186</span>
<span>187</span>
<span>188</span>
<span>189</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  # Sets the options on the environment if this is the top-level root.
</div><div class="line">  def visit_root(node)
</div><div class="line active">    yield
</div><div class="line">  rescue Sass::SyntaxError =&gt; e
</div><div class="line">    e.sass_template ||= node.template
</div><div class="line">    raise e
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-31">
      <div class="info">
        Extracted source (around line <strong>#36</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
<span>39</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def visit(node)
</div><div class="line">      if respond_to?(node.class.visit_method, true)
</div><div class="line active">        send(node.class.visit_method, node) {visit_children(node)}
</div><div class="line">      else
</div><div class="line">        visit_children(node)
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-32">
      <div class="info">
        Extracted source (around line <strong>#157</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>155</span>
<span>156</span>
<span>157</span>
<span>158</span>
<span>159</span>
<span>160</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  # If an exception is raised, this adds proper metadata to the backtrace.
</div><div class="line">  def visit(node)
</div><div class="line active">    return super(node.dup) unless @environment
</div><div class="line">    @environment.stack.with_base(node.filename, node.line) {super(node.dup)}
</div><div class="line">  rescue Sass::SyntaxError =&gt; e
</div><div class="line">    e.modify_backtrace(:filename =&gt; node.filename, :line =&gt; node.line)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-33">
      <div class="info">
        Extracted source (around line <strong>#10</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>8</span>
<span>9</span>
<span>10</span>
<span>11</span>
<span>12</span>
<span>13</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @return [Tree::Node] The resulting tree of static nodes.
</div><div class="line">    def visit(root, environment = nil)
</div><div class="line active">      new(environment).send(:visit, root)
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # @api private
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-34">
      <div class="info">
        Extracted source (around line <strong>#36</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
<span>39</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def css_tree
</div><div class="line">        Visitors::CheckNesting.visit(self)
</div><div class="line active">        result = Visitors::Perform.visit(self)
</div><div class="line">        Visitors::CheckNesting.visit(result) # Check again to validate mixins
</div><div class="line">        result, extends = Visitors::Cssize.visit(result)
</div><div class="line">        Visitors::Extend.visit(result, extends)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-35">
      <div class="info">
        Extracted source (around line <strong>#20</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      # @return [String] The compiled CSS.
</div><div class="line">      def render
</div><div class="line active">        css_tree.css
</div><div class="line">      end
</div><div class="line">
</div><div class="line">      # Runs the dynamic Sass code and computes the CSS for the tree, along with
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-36">
      <div class="info">
        Extracted source (around line <strong>#290</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>288</span>
<span>289</span>
<span>290</span>
<span>291</span>
<span>292</span>
<span>293</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # @raise [ArgumentError] if the document uses an unknown encoding with `@charset`
</div><div class="line">    def render
</div><div class="line active">      return _to_tree.render unless @options[:quiet]
</div><div class="line">      Sass::Util.silence_sass_warnings {_to_tree.render}
</div><div class="line">    end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-37">
      <div class="info">
        Extracted source (around line <strong>#47</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>45</span>
<span>46</span>
<span>47</span>
<span>48</span>
<span>49</span>
<span>50</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        engine = ::Sass::Engine.new(data, sass_config)
</div><div class="line active">        css = engine.render
</div><div class="line">
</div><div class="line">        engine.dependencies.map do |dependency|
</div><div class="line">          context.depend_on(dependency.options[:filename])
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-38">
      <div class="info">
        Extracted source (around line <strong>#109</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>107</span>
<span>108</span>
<span>109</span>
<span>110</span>
<span>111</span>
<span>112</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      current_template = Thread.current[:tilt_current_template]
</div><div class="line">      Thread.current[:tilt_current_template] = self
</div><div class="line active">      evaluate(scope, locals || {}, &amp;block)
</div><div class="line">    ensure
</div><div class="line">      Thread.current[:tilt_current_template] = current_template
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-39">
      <div class="info">
        Extracted source (around line <strong>#25</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      context  = input[:environment].context_class.new(input)
</div><div class="line">
</div><div class="line active">      data = @klass.new(filename) { data }.render(context, {})
</div><div class="line">      context.metadata.merge(data: data.to_str)
</div><div class="line">    end
</div><div class="line">  end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-40">
      <div class="info">
        Extracted source (around line <strong>#75</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>73</span>
<span>74</span>
<span>75</span>
<span>76</span>
<span>77</span>
<span>78</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      metadata[:data] = input[:data]
</div><div class="line">
</div><div class="line active">      case result = processor.call({data: "", metadata: {}}.merge(input))
</div><div class="line">      when NilClass
</div><div class="line">        metadata
</div><div class="line">      when Hash
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-41">
      <div class="info">
        Extracted source (around line <strong>#57</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>55</span>
<span>56</span>
<span>57</span>
<span>58</span>
<span>59</span>
<span>60</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">      processors.reverse_each do |processor|
</div><div class="line active">        result = call_processor(processor, input.merge(data: data, metadata: metadata))
</div><div class="line">        data = result.delete(:data)
</div><div class="line">        metadata.merge!(result)
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-42">
      <div class="info">
        Extracted source (around line <strong>#56</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>54</span>
<span>55</span>
<span>56</span>
<span>57</span>
<span>58</span>
<span>59</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      metadata = (input[:metadata] || {}).dup
</div><div class="line">
</div><div class="line active">      processors.reverse_each do |processor|
</div><div class="line">        result = call_processor(processor, input.merge(data: data, metadata: metadata))
</div><div class="line">        data = result.delete(:data)
</div><div class="line">        metadata.merge!(result)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-43">
      <div class="info">
        Extracted source (around line <strong>#56</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>54</span>
<span>55</span>
<span>56</span>
<span>57</span>
<span>58</span>
<span>59</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      metadata = (input[:metadata] || {}).dup
</div><div class="line">
</div><div class="line active">      processors.reverse_each do |processor|
</div><div class="line">        result = call_processor(processor, input.merge(data: data, metadata: metadata))
</div><div class="line">        data = result.delete(:data)
</div><div class="line">        metadata.merge!(result)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-44">
      <div class="info">
        Extracted source (around line <strong>#134</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>132</span>
<span>133</span>
<span>134</span>
<span>135</span>
<span>136</span>
<span>137</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        # Read into memory and process if theres a processor pipeline
</div><div class="line">        if processors.any?
</div><div class="line active">          result = call_processors(processors, {
</div><div class="line">            environment: self,
</div><div class="line">            cache: self.cache,
</div><div class="line">            uri: unloaded.uri,
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-45">
      <div class="info">
        Extracted source (around line <strong>#60</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>58</span>
<span>59</span>
<span>60</span>
<span>61</span>
<span>62</span>
<span>63</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">            end
</div><div class="line">          else
</div><div class="line active">            load_from_unloaded(unloaded)
</div><div class="line">          end
</div><div class="line">        end
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-46">
      <div class="info">
        Extracted source (around line <strong>#317</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>315</span>
<span>316</span>
<span>317</span>
<span>318</span>
<span>319</span>
<span>320</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        end
</div><div class="line">
</div><div class="line active">        asset = yield
</div><div class="line">        deps  = asset[:metadata][:dependencies].dup.map! do |uri|
</div><div class="line">          uri.start_with?("file-digest://") ? compress_from_root(uri) : uri
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-47">
      <div class="info">
        Extracted source (around line <strong>#44</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>42</span>
<span>43</span>
<span>44</span>
<span>45</span>
<span>46</span>
<span>47</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        end
</div><div class="line">      else
</div><div class="line active">        asset = fetch_asset_from_dependency_cache(unloaded) do |paths|
</div><div class="line">          # When asset is previously generated, its "dependencies" are stored in the cache.
</div><div class="line">          # The presence of `paths` indicates dependencies were stored.
</div><div class="line">          # We can check to see if the dependencies have not changed by "resolving" them and
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-48">
      <div class="info">
        Extracted source (around line <strong>#20</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      @stats   = Hash.new { |h, k| h[k] = _stat(k) }
</div><div class="line">      @entries = Hash.new { |h, k| h[k] = _entries(k) }
</div><div class="line active">      @uris    = Hash.new { |h, k| h[k] = _load(k) }
</div><div class="line">
</div><div class="line">      @processor_cache_keys  = Hash.new { |h, k| h[k] = _processor_cache_key(k) }
</div><div class="line">      @resolved_dependencies = Hash.new { |h, k| h[k] = _resolve_dependency(k) }
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-49">
      <div class="info">
        Extracted source (around line <strong>#47</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>45</span>
<span>46</span>
<span>47</span>
<span>48</span>
<span>49</span>
<span>50</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    alias_method :_load, :load
</div><div class="line">    def load(uri)
</div><div class="line active">      @uris[uri]
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Internal: Cache Environment#processor_cache_key
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-50">
      <div class="info">
        Extracted source (around line <strong>#23</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>21</span>
<span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      dependencies.merge(deps)
</div><div class="line">
</div><div class="line active">      find_required = proc { |uri| env.load(uri).metadata[:required] }
</div><div class="line">      required = Utils.dfs(processed_uri, &amp;find_required)
</div><div class="line">      stubbed  = Utils.dfs(env.load(processed_uri).metadata[:stubbed], &amp;find_required)
</div><div class="line">      required.subtract(stubbed)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-51">
      <div class="info">
        Extracted source (around line <strong>#200</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>198</span>
<span>199</span>
<span>200</span>
<span>201</span>
<span>202</span>
<span>203</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          seen.add(node)
</div><div class="line">          stack.push(node)
</div><div class="line active">          stack.concat(Array(yield node).reverse)
</div><div class="line">        end
</div><div class="line">      end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-52">
      <div class="info">
        Extracted source (around line <strong>#24</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">      find_required = proc { |uri| env.load(uri).metadata[:required] }
</div><div class="line active">      required = Utils.dfs(processed_uri, &amp;find_required)
</div><div class="line">      stubbed  = Utils.dfs(env.load(processed_uri).metadata[:stubbed], &amp;find_required)
</div><div class="line">      required.subtract(stubbed)
</div><div class="line">      assets = required.map { |uri| env.load(uri) }
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-53">
      <div class="info">
        Extracted source (around line <strong>#75</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>73</span>
<span>74</span>
<span>75</span>
<span>76</span>
<span>77</span>
<span>78</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      metadata[:data] = input[:data]
</div><div class="line">
</div><div class="line active">      case result = processor.call({data: "", metadata: {}}.merge(input))
</div><div class="line">      when NilClass
</div><div class="line">        metadata
</div><div class="line">      when Hash
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-54">
      <div class="info">
        Extracted source (around line <strong>#57</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>55</span>
<span>56</span>
<span>57</span>
<span>58</span>
<span>59</span>
<span>60</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">      processors.reverse_each do |processor|
</div><div class="line active">        result = call_processor(processor, input.merge(data: data, metadata: metadata))
</div><div class="line">        data = result.delete(:data)
</div><div class="line">        metadata.merge!(result)
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-55">
      <div class="info">
        Extracted source (around line <strong>#56</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>54</span>
<span>55</span>
<span>56</span>
<span>57</span>
<span>58</span>
<span>59</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      metadata = (input[:metadata] || {}).dup
</div><div class="line">
</div><div class="line active">      processors.reverse_each do |processor|
</div><div class="line">        result = call_processor(processor, input.merge(data: data, metadata: metadata))
</div><div class="line">        data = result.delete(:data)
</div><div class="line">        metadata.merge!(result)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-56">
      <div class="info">
        Extracted source (around line <strong>#56</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>54</span>
<span>55</span>
<span>56</span>
<span>57</span>
<span>58</span>
<span>59</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      metadata = (input[:metadata] || {}).dup
</div><div class="line">
</div><div class="line active">      processors.reverse_each do |processor|
</div><div class="line">        result = call_processor(processor, input.merge(data: data, metadata: metadata))
</div><div class="line">        data = result.delete(:data)
</div><div class="line">        metadata.merge!(result)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-57">
      <div class="info">
        Extracted source (around line <strong>#134</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>132</span>
<span>133</span>
<span>134</span>
<span>135</span>
<span>136</span>
<span>137</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        # Read into memory and process if theres a processor pipeline
</div><div class="line">        if processors.any?
</div><div class="line active">          result = call_processors(processors, {
</div><div class="line">            environment: self,
</div><div class="line">            cache: self.cache,
</div><div class="line">            uri: unloaded.uri,
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-58">
      <div class="info">
        Extracted source (around line <strong>#60</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>58</span>
<span>59</span>
<span>60</span>
<span>61</span>
<span>62</span>
<span>63</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">            end
</div><div class="line">          else
</div><div class="line active">            load_from_unloaded(unloaded)
</div><div class="line">          end
</div><div class="line">        end
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-59">
      <div class="info">
        Extracted source (around line <strong>#317</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>315</span>
<span>316</span>
<span>317</span>
<span>318</span>
<span>319</span>
<span>320</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        end
</div><div class="line">
</div><div class="line active">        asset = yield
</div><div class="line">        deps  = asset[:metadata][:dependencies].dup.map! do |uri|
</div><div class="line">          uri.start_with?("file-digest://") ? compress_from_root(uri) : uri
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-60">
      <div class="info">
        Extracted source (around line <strong>#44</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>42</span>
<span>43</span>
<span>44</span>
<span>45</span>
<span>46</span>
<span>47</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        end
</div><div class="line">      else
</div><div class="line active">        asset = fetch_asset_from_dependency_cache(unloaded) do |paths|
</div><div class="line">          # When asset is previously generated, its "dependencies" are stored in the cache.
</div><div class="line">          # The presence of `paths` indicates dependencies were stored.
</div><div class="line">          # We can check to see if the dependencies have not changed by "resolving" them and
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-61">
      <div class="info">
        Extracted source (around line <strong>#20</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      @stats   = Hash.new { |h, k| h[k] = _stat(k) }
</div><div class="line">      @entries = Hash.new { |h, k| h[k] = _entries(k) }
</div><div class="line active">      @uris    = Hash.new { |h, k| h[k] = _load(k) }
</div><div class="line">
</div><div class="line">      @processor_cache_keys  = Hash.new { |h, k| h[k] = _processor_cache_key(k) }
</div><div class="line">      @resolved_dependencies = Hash.new { |h, k| h[k] = _resolve_dependency(k) }
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-62">
      <div class="info">
        Extracted source (around line <strong>#47</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>45</span>
<span>46</span>
<span>47</span>
<span>48</span>
<span>49</span>
<span>50</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    alias_method :_load, :load
</div><div class="line">    def load(uri)
</div><div class="line active">      @uris[uri]
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Internal: Cache Environment#processor_cache_key
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-63">
      <div class="info">
        Extracted source (around line <strong>#66</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>64</span>
<span>65</span>
<span>66</span>
<span>67</span>
<span>68</span>
<span>69</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      uri, _ = resolve(path, options.merge(compat: false))
</div><div class="line">      if uri
</div><div class="line active">        load(uri)
</div><div class="line">      end
</div><div class="line">    end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-64">
      <div class="info">
        Extracted source (around line <strong>#92</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>90</span>
<span>91</span>
<span>92</span>
<span>93</span>
<span>94</span>
<span>95</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    #
</div><div class="line">    def [](*args)
</div><div class="line active">      find_asset(*args)
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Pretty inspect
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-65">
      <div class="info">
        Extracted source (around line <strong>#355</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>353</span>
<span>354</span>
<span>355</span>
<span>356</span>
<span>357</span>
<span>358</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        private
</div><div class="line">          def find_asset(path, options = {})
</div><div class="line active">            @env[path, options]
</div><div class="line">          end
</div><div class="line">
</div><div class="line">          def precompiled?(path)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-66">
      <div class="info">
        Extracted source (around line <strong>#347</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>345</span>
<span>346</span>
<span>347</span>
<span>348</span>
<span>349</span>
<span>350</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        def find_debug_asset(path)
</div><div class="line active">          if asset = find_asset(path, pipeline: :debug)
</div><div class="line">            raise_unless_precompiled_asset asset.logical_path.sub('.debug', '')
</div><div class="line">            asset
</div><div class="line">          end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-67">
      <div class="info">
        Extracted source (around line <strong>#229</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>227</span>
<span>228</span>
<span>229</span>
<span>230</span>
<span>231</span>
<span>232</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">          resolve_asset do |resolver|
</div><div class="line active">            resolver.find_debug_asset path
</div><div class="line">          end
</div><div class="line">        end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-68">
      <div class="info">
        Extracted source (around line <strong>#242</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>240</span>
<span>241</span>
<span>242</span>
<span>243</span>
<span>244</span>
<span>245</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        def resolve_asset
</div><div class="line">          asset_resolver_strategies.detect do |resolver|
</div><div class="line active">            if result = yield(resolver)
</div><div class="line">              break result
</div><div class="line">            end
</div><div class="line">          end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-69">
      <div class="info">
        Extracted source (around line <strong>#241</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>239</span>
<span>240</span>
<span>241</span>
<span>242</span>
<span>243</span>
<span>244</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        # Try each asset resolver and return the first non-nil result.
</div><div class="line">        def resolve_asset
</div><div class="line active">          asset_resolver_strategies.detect do |resolver|
</div><div class="line">            if result = yield(resolver)
</div><div class="line">              break result
</div><div class="line">            end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-70">
      <div class="info">
        Extracted source (around line <strong>#241</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>239</span>
<span>240</span>
<span>241</span>
<span>242</span>
<span>243</span>
<span>244</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        # Try each asset resolver and return the first non-nil result.
</div><div class="line">        def resolve_asset
</div><div class="line active">          asset_resolver_strategies.detect do |resolver|
</div><div class="line">            if result = yield(resolver)
</div><div class="line">              break result
</div><div class="line">            end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-71">
      <div class="info">
        Extracted source (around line <strong>#241</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>239</span>
<span>240</span>
<span>241</span>
<span>242</span>
<span>243</span>
<span>244</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        # Try each asset resolver and return the first non-nil result.
</div><div class="line">        def resolve_asset
</div><div class="line active">          asset_resolver_strategies.detect do |resolver|
</div><div class="line">            if result = yield(resolver)
</div><div class="line">              break result
</div><div class="line">            end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-72">
      <div class="info">
        Extracted source (around line <strong>#228</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>226</span>
<span>227</span>
<span>228</span>
<span>229</span>
<span>230</span>
<span>231</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          path = path_with_extname(path, options)
</div><div class="line">
</div><div class="line active">          resolve_asset do |resolver|
</div><div class="line">            resolver.find_debug_asset path
</div><div class="line">          end
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-73">
      <div class="info">
        Extracted source (around line <strong>#170</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>168</span>
<span>169</span>
<span>170</span>
<span>171</span>
<span>172</span>
<span>173</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        if options["debug"] != false &amp;&amp; request_debug_assets?
</div><div class="line">          sources.map { |source|
</div><div class="line active">            if asset = lookup_debug_asset(source, type: :stylesheet)
</div><div class="line">              if asset.respond_to?(:to_a)
</div><div class="line">                asset.to_a.map do |a|
</div><div class="line">                  super(path_to_stylesheet(a.logical_path, debug: true), options)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-74">
      <div class="info">
        Extracted source (around line <strong>#169</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>167</span>
<span>168</span>
<span>169</span>
<span>170</span>
<span>171</span>
<span>172</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        if options["debug"] != false &amp;&amp; request_debug_assets?
</div><div class="line active">          sources.map { |source|
</div><div class="line">            if asset = lookup_debug_asset(source, type: :stylesheet)
</div><div class="line">              if asset.respond_to?(:to_a)
</div><div class="line">                asset.to_a.map do |a|
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-75">
      <div class="info">
        Extracted source (around line <strong>#169</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>167</span>
<span>168</span>
<span>169</span>
<span>170</span>
<span>171</span>
<span>172</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        if options["debug"] != false &amp;&amp; request_debug_assets?
</div><div class="line active">          sources.map { |source|
</div><div class="line">            if asset = lookup_debug_asset(source, type: :stylesheet)
</div><div class="line">              if asset.respond_to?(:to_a)
</div><div class="line">                asset.to_a.map do |a|
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-76">
      <div class="info">
        Extracted source (around line <strong>#2</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>1</span>
<span>2</span>
<span>3</span>
<span>4</span>
<span>5</span>
<span>6</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">&lt;head&gt;
</div><div class="line active">  &lt;%= stylesheet_link_tag "lectures/lecture_new", :media =&gt; "all" %&gt;
</div><div class="line">&lt;/head&gt;
</div><div class="line">
</div><div class="line">&lt;section id="lecture-post"&gt;
</div><div class="line">  &lt;div class="container"&gt;
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-77">
      <div class="info">
        Extracted source (around line <strong>#159</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>157</span>
<span>158</span>
<span>159</span>
<span>160</span>
<span>161</span>
<span>162</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      instrument_render_template do
</div><div class="line">        compile!(view)
</div><div class="line active">        view.send(method_name, locals, buffer, &amp;block)
</div><div class="line">      end
</div><div class="line">    rescue =&gt; e
</div><div class="line">      handle_render_error(view, e)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-78">
      <div class="info">
        Extracted source (around line <strong>#170</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>168</span>
<span>169</span>
<span>170</span>
<span>171</span>
<span>172</span>
<span>173</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          instrumenter.instrument(name, payload) { yield payload if block_given? }
</div><div class="line">        else
</div><div class="line active">          yield payload if block_given?
</div><div class="line">        end
</div><div class="line">      end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-79">
      <div class="info">
        Extracted source (around line <strong>#354</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>352</span>
<span>353</span>
<span>354</span>
<span>355</span>
<span>356</span>
<span>357</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">      def instrument_render_template(&amp;block)
</div><div class="line active">        ActiveSupport::Notifications.instrument("!render_template.action_view".freeze, instrument_payload, &amp;block)
</div><div class="line">      end
</div><div class="line">
</div><div class="line">      def instrument_payload
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-80">
      <div class="info">
        Extracted source (around line <strong>#157</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>155</span>
<span>156</span>
<span>157</span>
<span>158</span>
<span>159</span>
<span>160</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # consume this in production. This is only slow if it's being listened to.
</div><div class="line">    def render(view, locals, buffer = nil, &amp;block)
</div><div class="line active">      instrument_render_template do
</div><div class="line">        compile!(view)
</div><div class="line">        view.send(method_name, locals, buffer, &amp;block)
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-81">
      <div class="info">
        Extracted source (around line <strong>#54</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
<span>56</span>
<span>57</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        render_with_layout(layout_name, locals) do |layout|
</div><div class="line">          instrument(:template, identifier: template.identifier, layout: layout.try(:virtual_path)) do
</div><div class="line active">            template.render(view, locals) { |*name| view._layout_for(*name) }
</div><div class="line">          end
</div><div class="line">        end
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-82">
      <div class="info">
        Extracted source (around line <strong>#44</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>42</span>
<span>43</span>
<span>44</span>
<span>45</span>
<span>46</span>
<span>47</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        ActiveSupport::Notifications.instrument("render_#{name}.action_view", options) do |payload|
</div><div class="line active">          yield payload
</div><div class="line">        end
</div><div class="line">      end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-83">
      <div class="info">
        Extracted source (around line <strong>#168</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>166</span>
<span>167</span>
<span>168</span>
<span>169</span>
<span>170</span>
<span>171</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def instrument(name, payload = {})
</div><div class="line">        if notifier.listening?(name)
</div><div class="line active">          instrumenter.instrument(name, payload) { yield payload if block_given? }
</div><div class="line">        else
</div><div class="line">          yield payload if block_given?
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-84">
      <div class="info">
        Extracted source (around line <strong>#23</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>21</span>
<span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        listeners_state = start name, payload
</div><div class="line">        begin
</div><div class="line active">          yield payload
</div><div class="line">        rescue Exception =&gt; e
</div><div class="line">          payload[:exception] = [e.class.name, e.message]
</div><div class="line">          payload[:exception_object] = e
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-85">
      <div class="info">
        Extracted source (around line <strong>#168</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>166</span>
<span>167</span>
<span>168</span>
<span>169</span>
<span>170</span>
<span>171</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def instrument(name, payload = {})
</div><div class="line">        if notifier.listening?(name)
</div><div class="line active">          instrumenter.instrument(name, payload) { yield payload if block_given? }
</div><div class="line">        else
</div><div class="line">          yield payload if block_given?
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-86">
      <div class="info">
        Extracted source (around line <strong>#43</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>41</span>
<span>42</span>
<span>43</span>
<span>44</span>
<span>45</span>
<span>46</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        options[:identifier] ||= (@template &amp;&amp; @template.identifier) || @path
</div><div class="line">
</div><div class="line active">        ActiveSupport::Notifications.instrument("render_#{name}.action_view", options) do |payload|
</div><div class="line">          yield payload
</div><div class="line">        end
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-87">
      <div class="info">
        Extracted source (around line <strong>#53</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>51</span>
<span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
<span>56</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        render_with_layout(layout_name, locals) do |layout|
</div><div class="line active">          instrument(:template, identifier: template.identifier, layout: layout.try(:virtual_path)) do
</div><div class="line">            template.render(view, locals) { |*name| view._layout_for(*name) }
</div><div class="line">          end
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-88">
      <div class="info">
        Extracted source (around line <strong>#61</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>59</span>
<span>60</span>
<span>61</span>
<span>62</span>
<span>63</span>
<span>64</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def render_with_layout(path, locals)
</div><div class="line">        layout  = path &amp;&amp; find_layout(path, locals.keys, [formats.first])
</div><div class="line active">        content = yield(layout)
</div><div class="line">
</div><div class="line">        if layout
</div><div class="line">          view = @view
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-89">
      <div class="info">
        Extracted source (around line <strong>#52</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>50</span>
<span>51</span>
<span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        view, locals = @view, locals || {}
</div><div class="line">
</div><div class="line active">        render_with_layout(layout_name, locals) do |layout|
</div><div class="line">          instrument(:template, identifier: template.identifier, layout: layout.try(:virtual_path)) do
</div><div class="line">            template.render(view, locals) { |*name| view._layout_for(*name) }
</div><div class="line">          end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-90">
      <div class="info">
        Extracted source (around line <strong>#16</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>14</span>
<span>15</span>
<span>16</span>
<span>17</span>
<span>18</span>
<span>19</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      @lookup_context.rendered_format ||= (template.formats.first || formats.first)
</div><div class="line">
</div><div class="line active">      render_template(template, options[:layout], options[:locals])
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    private
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-91">
      <div class="info">
        Extracted source (around line <strong>#44</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>42</span>
<span>43</span>
<span>44</span>
<span>45</span>
<span>46</span>
<span>47</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # Direct access to template rendering.
</div><div class="line">    def render_template(context, options) #:nodoc:
</div><div class="line active">      TemplateRenderer.new(@lookup_context).render(context, options)
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Direct access to partial rendering.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-92">
      <div class="info">
        Extracted source (around line <strong>#25</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        render_partial(context, options)
</div><div class="line">      else
</div><div class="line active">        render_template(context, options)
</div><div class="line">      end
</div><div class="line">    end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-93">
      <div class="info">
        Extracted source (around line <strong>#103</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>101</span>
<span>102</span>
<span>103</span>
<span>104</span>
<span>105</span>
<span>106</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        lookup_context.variants = variant if variant
</div><div class="line">
</div><div class="line active">        view_renderer.render(context, options)
</div><div class="line">      end
</div><div class="line">
</div><div class="line">      # Assign the rendered format to look up context.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-94">
      <div class="info">
        Extracted source (around line <strong>#219</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>217</span>
<span>218</span>
<span>219</span>
<span>220</span>
<span>221</span>
<span>222</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          Rack::Chunked::Body.new view_renderer.render_body(view_context, options)
</div><div class="line">        else
</div><div class="line active">          super
</div><div class="line">        end
</div><div class="line">      end
</div><div class="line">  end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-95">
      <div class="info">
        Extracted source (around line <strong>#84</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>82</span>
<span>83</span>
<span>84</span>
<span>85</span>
<span>86</span>
<span>87</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def render_to_body(options = {})
</div><div class="line">      _process_options(options)
</div><div class="line active">      _render_template(options)
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    def rendered_format
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-96">
      <div class="info">
        Extracted source (around line <strong>#52</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>50</span>
<span>51</span>
<span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">    def render_to_body(options = {})
</div><div class="line active">      super || _render_in_priorities(options) || " "
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    private
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-97">
      <div class="info">
        Extracted source (around line <strong>#142</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>140</span>
<span>141</span>
<span>142</span>
<span>143</span>
<span>144</span>
<span>145</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # &lt;tt&gt;ActionView::Rendering.render_to_body&lt;/tt&gt;, if present.
</div><div class="line">    def render_to_body(options)
</div><div class="line active">      _render_to_body_with_renderer(options) || super
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    def _render_to_body_with_renderer(options)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-98">
      <div class="info">
        Extracted source (around line <strong>#25</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def render(*args, &amp;block)
</div><div class="line">      options = _normalize_render(*args, &amp;block)
</div><div class="line active">      rendered_body = render_to_body(options)
</div><div class="line">      if options[:html]
</div><div class="line">        _set_html_content_type
</div><div class="line">      else
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-99">
      <div class="info">
        Extracted source (around line <strong>#36</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
<span>39</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def render(*args) #:nodoc:
</div><div class="line">      raise ::AbstractController::DoubleRenderError if response_body
</div><div class="line active">      super
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Overwrite render_to_string because body can now be set to a Rack body.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-100">
      <div class="info">
        Extracted source (around line <strong>#46</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>44</span>
<span>45</span>
<span>46</span>
<span>47</span>
<span>48</span>
<span>49</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      render_output = nil
</div><div class="line">      self.view_runtime = cleanup_view_runtime do
</div><div class="line active">        Benchmark.ms { render_output = super }
</div><div class="line">      end
</div><div class="line">      render_output
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-101">
      <div class="info">
        Extracted source (around line <strong>#14</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  #   # =&gt; 0.074
</div><div class="line">  def ms
</div><div class="line active">    1000 * realtime { yield }
</div><div class="line">  end
</div><div class="line">end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-102">
      <div class="info">
        Extracted source (around line <strong>#308</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>306</span>
<span>307</span>
<span>308</span>
<span>309</span>
<span>310</span>
<span>311</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  def realtime # :yield:
</div><div class="line">    r0 = Process.clock_gettime(Process::CLOCK_MONOTONIC)
</div><div class="line active">    yield
</div><div class="line">    Process.clock_gettime(Process::CLOCK_MONOTONIC) - r0
</div><div class="line">  end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-103">
      <div class="info">
        Extracted source (around line <strong>#14</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  #   # =&gt; 0.074
</div><div class="line">  def ms
</div><div class="line active">    1000 * realtime { yield }
</div><div class="line">  end
</div><div class="line">end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-104">
      <div class="info">
        Extracted source (around line <strong>#46</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>44</span>
<span>45</span>
<span>46</span>
<span>47</span>
<span>48</span>
<span>49</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      render_output = nil
</div><div class="line">      self.view_runtime = cleanup_view_runtime do
</div><div class="line active">        Benchmark.ms { render_output = super }
</div><div class="line">      end
</div><div class="line">      render_output
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-105">
      <div class="info">
        Extracted source (around line <strong>#87</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>85</span>
<span>86</span>
<span>87</span>
<span>88</span>
<span>89</span>
<span>90</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    #   end
</div><div class="line">    def cleanup_view_runtime # :doc:
</div><div class="line active">      yield
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Every time after an action is processed, this method is invoked
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-106">
      <div class="info">
        Extracted source (around line <strong>#31</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>29</span>
<span>30</span>
<span>31</span>
<span>32</span>
<span>33</span>
<span>34</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          db_rt_before_render = ActiveRecord::LogSubscriber.reset_runtime
</div><div class="line">          self.db_runtime = (db_runtime || 0) + db_rt_before_render
</div><div class="line active">          runtime = super
</div><div class="line">          db_rt_after_render = ActiveRecord::LogSubscriber.reset_runtime
</div><div class="line">          self.db_runtime += db_rt_after_render
</div><div class="line">          runtime - db_rt_after_render
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-107">
      <div class="info">
        Extracted source (around line <strong>#45</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>43</span>
<span>44</span>
<span>45</span>
<span>46</span>
<span>47</span>
<span>48</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def render(*args)
</div><div class="line">      render_output = nil
</div><div class="line active">      self.view_runtime = cleanup_view_runtime do
</div><div class="line">        Benchmark.ms { render_output = super }
</div><div class="line">      end
</div><div class="line">      render_output
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-108">
      <div class="info">
        Extracted source (around line <strong>#35</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>33</span>
<span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def default_render(*args)
</div><div class="line">      if template_exists?(action_name.to_s, _prefixes, variants: request.variant)
</div><div class="line active">        render(*args)
</div><div class="line">      elsif any_templates?(action_name.to_s, _prefixes)
</div><div class="line">        message = "#{self.class.name}\##{action_name} is missing a template " \
</div><div class="line">          "for this request format and variant.\n" \
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-109">
      <div class="info">
        Extracted source (around line <strong>#6</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>4</span>
<span>5</span>
<span>6</span>
<span>7</span>
<span>8</span>
<span>9</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  module BasicImplicitRender # :nodoc:
</div><div class="line">    def send_action(method, *args)
</div><div class="line active">      super.tap { default_render unless performed? }
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    def default_render(*args)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-110">
      <div class="info">
        Extracted source (around line <strong>#6</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>4</span>
<span>5</span>
<span>6</span>
<span>7</span>
<span>8</span>
<span>9</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  module BasicImplicitRender # :nodoc:
</div><div class="line">    def send_action(method, *args)
</div><div class="line active">      super.tap { default_render unless performed? }
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    def default_render(*args)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-111">
      <div class="info">
        Extracted source (around line <strong>#6</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>4</span>
<span>5</span>
<span>6</span>
<span>7</span>
<span>8</span>
<span>9</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">  module BasicImplicitRender # :nodoc:
</div><div class="line">    def send_action(method, *args)
</div><div class="line active">      super.tap { default_render unless performed? }
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    def default_render(*args)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-112">
      <div class="info">
        Extracted source (around line <strong>#194</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>192</span>
<span>193</span>
<span>194</span>
<span>195</span>
<span>196</span>
<span>197</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      # which is *not* necessarily the same as the action name.
</div><div class="line">      def process_action(method_name, *args)
</div><div class="line active">        send_action(method_name, *args)
</div><div class="line">      end
</div><div class="line">
</div><div class="line">      # Actually call the method associated with the action. Override
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-113">
      <div class="info">
        Extracted source (around line <strong>#30</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>28</span>
<span>29</span>
<span>30</span>
<span>31</span>
<span>32</span>
<span>33</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def process_action(*) #:nodoc:
</div><div class="line">      self.formats = request.formats.map(&amp;:ref).compact
</div><div class="line active">      super
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Check for double render errors and set the content_type after rendering.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-114">
      <div class="info">
        Extracted source (around line <strong>#42</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>40</span>
<span>41</span>
<span>42</span>
<span>43</span>
<span>44</span>
<span>45</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def process_action(*args)
</div><div class="line">      run_callbacks(:process_action) do
</div><div class="line active">        super
</div><div class="line">      end
</div><div class="line">    end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-115">
      <div class="info">
        Extracted source (around line <strong>#132</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>130</span>
<span>131</span>
<span>132</span>
<span>133</span>
<span>134</span>
<span>135</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        if next_sequence.final?
</div><div class="line">          next_sequence.invoke_before(env)
</div><div class="line active">          env.value = !env.halted &amp;&amp; (!block_given? || yield)
</div><div class="line">          next_sequence.invoke_after(env)
</div><div class="line">          env.value
</div><div class="line">        else
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-116">
      <div class="info">
        Extracted source (around line <strong>#41</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>39</span>
<span>40</span>
<span>41</span>
<span>42</span>
<span>43</span>
<span>44</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    # &lt;tt&gt;process_action&lt;/tt&gt; callbacks around the normal behavior.
</div><div class="line">    def process_action(*args)
</div><div class="line active">      run_callbacks(:process_action) do
</div><div class="line">        super
</div><div class="line">      end
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-117">
      <div class="info">
        Extracted source (around line <strong>#22</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    private
</div><div class="line">      def process_action(*args)
</div><div class="line active">        super
</div><div class="line">      rescue Exception =&gt; exception
</div><div class="line">        request.env["action_dispatch.show_detailed_exceptions"] ||= show_detailed_exceptions?
</div><div class="line">        rescue_with_handler(exception) || raise
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-118">
      <div class="info">
        Extracted source (around line <strong>#34</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>32</span>
<span>33</span>
<span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      ActiveSupport::Notifications.instrument("process_action.action_controller", raw_payload) do |payload|
</div><div class="line">        begin
</div><div class="line active">          result = super
</div><div class="line">          payload[:status] = response.status
</div><div class="line">          result
</div><div class="line">        ensure
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-119">
      <div class="info">
        Extracted source (around line <strong>#168</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>166</span>
<span>167</span>
<span>168</span>
<span>169</span>
<span>170</span>
<span>171</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def instrument(name, payload = {})
</div><div class="line">        if notifier.listening?(name)
</div><div class="line active">          instrumenter.instrument(name, payload) { yield payload if block_given? }
</div><div class="line">        else
</div><div class="line">          yield payload if block_given?
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-120">
      <div class="info">
        Extracted source (around line <strong>#23</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>21</span>
<span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        listeners_state = start name, payload
</div><div class="line">        begin
</div><div class="line active">          yield payload
</div><div class="line">        rescue Exception =&gt; e
</div><div class="line">          payload[:exception] = [e.class.name, e.message]
</div><div class="line">          payload[:exception_object] = e
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-121">
      <div class="info">
        Extracted source (around line <strong>#168</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>166</span>
<span>167</span>
<span>168</span>
<span>169</span>
<span>170</span>
<span>171</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def instrument(name, payload = {})
</div><div class="line">        if notifier.listening?(name)
</div><div class="line active">          instrumenter.instrument(name, payload) { yield payload if block_given? }
</div><div class="line">        else
</div><div class="line">          yield payload if block_given?
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-122">
      <div class="info">
        Extracted source (around line <strong>#32</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>30</span>
<span>31</span>
<span>32</span>
<span>33</span>
<span>34</span>
<span>35</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      ActiveSupport::Notifications.instrument("start_processing.action_controller", raw_payload.dup)
</div><div class="line">
</div><div class="line active">      ActiveSupport::Notifications.instrument("process_action.action_controller", raw_payload) do |payload|
</div><div class="line">        begin
</div><div class="line">          result = super
</div><div class="line">          payload[:status] = response.status
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-123">
      <div class="info">
        Extracted source (around line <strong>#256</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>254</span>
<span>255</span>
<span>256</span>
<span>257</span>
<span>258</span>
<span>259</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        request.filtered_parameters.merge! wrapped_filtered_hash
</div><div class="line">      end
</div><div class="line active">      super
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    private
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-124">
      <div class="info">
        Extracted source (around line <strong>#24</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        # and it won't be cleaned up by the method below.
</div><div class="line">        ActiveRecord::LogSubscriber.reset_runtime
</div><div class="line active">        super
</div><div class="line">      end
</div><div class="line">
</div><div class="line">      def cleanup_view_runtime
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-125">
      <div class="info">
        Extracted source (around line <strong>#134</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>132</span>
<span>133</span>
<span>134</span>
<span>135</span>
<span>136</span>
<span>137</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      @_response_body = nil
</div><div class="line">
</div><div class="line active">      process_action(action_name, *args)
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Delegates to the class' ::controller_path
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-126">
      <div class="info">
        Extracted source (around line <strong>#32</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>30</span>
<span>31</span>
<span>32</span>
<span>33</span>
<span>34</span>
<span>35</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def process(*) #:nodoc:
</div><div class="line">      old_config, I18n.config = I18n.config, I18nProxy.new(I18n.config, lookup_context)
</div><div class="line active">      super
</div><div class="line">    ensure
</div><div class="line">      I18n.config = old_config
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-127">
      <div class="info">
        Extracted source (around line <strong>#191</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>189</span>
<span>190</span>
<span>191</span>
<span>192</span>
<span>193</span>
<span>194</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      set_request!(request)
</div><div class="line">      set_response!(response)
</div><div class="line active">      process(name)
</div><div class="line">      request.commit_flash
</div><div class="line">      to_a
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-128">
      <div class="info">
        Extracted source (around line <strong>#252</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>250</span>
<span>251</span>
<span>252</span>
<span>253</span>
<span>254</span>
<span>255</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        middleware_stack.build(name) { |env| new.dispatch(name, req, res) }.call req.env
</div><div class="line">      else
</div><div class="line active">        new.dispatch(name, req, res)
</div><div class="line">      end
</div><div class="line">    end
</div><div class="line">  end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-129">
      <div class="info">
        Extracted source (around line <strong>#52</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>50</span>
<span>51</span>
<span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        def dispatch(controller, action, req, res)
</div><div class="line active">          controller.dispatch(action, req, res)
</div><div class="line">        end
</div><div class="line">      end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-130">
      <div class="info">
        Extracted source (around line <strong>#34</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>32</span>
<span>33</span>
<span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          controller = controller req
</div><div class="line">          res        = controller.make_response! req
</div><div class="line active">          dispatch(controller, params[:action], req, res)
</div><div class="line">        rescue ActionController::RoutingError
</div><div class="line">          if @raise_on_name_error
</div><div class="line">            raise
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-131">
      <div class="info">
        Extracted source (around line <strong>#52</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>50</span>
<span>51</span>
<span>52</span>
<span>53</span>
<span>54</span>
<span>55</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          req.path_parameters = set_params.merge parameters
</div><div class="line">
</div><div class="line active">          status, headers, body = route.app.serve(req)
</div><div class="line">
</div><div class="line">          if "pass" == headers["X-Cascade"]
</div><div class="line">            req.script_name     = script_name
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-132">
      <div class="info">
        Extracted source (around line <strong>#35</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>33</span>
<span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">      def serve(req)
</div><div class="line active">        find_routes(req).each do |match, parameters, route|
</div><div class="line">          set_params  = req.path_parameters
</div><div class="line">          path_info   = req.path_info
</div><div class="line">          script_name = req.script_name
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-133">
      <div class="info">
        Extracted source (around line <strong>#35</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>33</span>
<span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">      def serve(req)
</div><div class="line active">        find_routes(req).each do |match, parameters, route|
</div><div class="line">          set_params  = req.path_parameters
</div><div class="line">          path_info   = req.path_info
</div><div class="line">          script_name = req.script_name
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-134">
      <div class="info">
        Extracted source (around line <strong>#840</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>838</span>
<span>839</span>
<span>840</span>
<span>841</span>
<span>842</span>
<span>843</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        req = make_request(env)
</div><div class="line">        req.path_info = Journey::Router::Utils.normalize_path(req.path_info)
</div><div class="line active">        @router.serve(req)
</div><div class="line">      end
</div><div class="line">
</div><div class="line">      def recognize_path(path, environment = {})
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-135">
      <div class="info">
        Extracted source (around line <strong>#15</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
<span>17</span>
<span>18</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def call(env)
</div><div class="line">      env[RACK_TEMPFILES] ||= []
</div><div class="line active">      status, headers, body = @app.call(env)
</div><div class="line">      body_proxy = BodyProxy.new(body) do
</div><div class="line">        env[RACK_TEMPFILES].each(&amp;:close!) unless env[RACK_TEMPFILES].nil?
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-136">
      <div class="info">
        Extracted source (around line <strong>#25</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">    def call(env)
</div><div class="line active">      status, headers, body = @app.call(env)
</div><div class="line">
</div><div class="line">      if etag_status?(status) &amp;&amp; etag_body?(body) &amp;&amp; !skip_caching?(headers)
</div><div class="line">        original_body = body
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-137">
      <div class="info">
        Extracted source (around line <strong>#25</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      case env[REQUEST_METHOD]
</div><div class="line">      when "GET", "HEAD"
</div><div class="line active">        status, headers, body = @app.call(env)
</div><div class="line">        headers = Utils::HeaderHash.new(headers)
</div><div class="line">        if status == 200 &amp;&amp; fresh?(env, headers)
</div><div class="line">          status = 304
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-138">
      <div class="info">
        Extracted source (around line <strong>#12</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>10</span>
<span>11</span>
<span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">    def call(env)
</div><div class="line active">      status, headers, body = @app.call(env)
</div><div class="line">
</div><div class="line">      if env[REQUEST_METHOD] == HEAD
</div><div class="line">        [
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-139">
      <div class="info">
        Extracted source (around line <strong>#18</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>16</span>
<span>17</span>
<span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def call(env)
</div><div class="line">        request = ActionDispatch::Request.new env
</div><div class="line active">        _, headers, _ = response = @app.call(env)
</div><div class="line">
</div><div class="line">        return response unless html_response?(headers)
</div><div class="line">        return response if policy_present?(headers)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-140">
      <div class="info">
        Extracted source (around line <strong>#232</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>230</span>
<span>231</span>
<span>232</span>
<span>233</span>
<span>234</span>
<span>235</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          req = make_request env
</div><div class="line">          prepare_session(req)
</div><div class="line active">          status, headers, body = app.call(req.env)
</div><div class="line">          res = Rack::Response::Raw.new status, headers
</div><div class="line">          commit_session(req, res)
</div><div class="line">          [status, headers, body]
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-141">
      <div class="info">
        Extracted source (around line <strong>#226</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>224</span>
<span>225</span>
<span>226</span>
<span>227</span>
<span>228</span>
<span>229</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        def call(env)
</div><div class="line active">          context(env)
</div><div class="line">        end
</div><div class="line">
</div><div class="line">        def context(env, app=@app)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-142">
      <div class="info">
        Extracted source (around line <strong>#670</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>668</span>
<span>669</span>
<span>670</span>
<span>671</span>
<span>672</span>
<span>673</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      request = ActionDispatch::Request.new env
</div><div class="line">
</div><div class="line active">      status, headers, body = @app.call(env)
</div><div class="line">
</div><div class="line">      if request.have_cookie_jar?
</div><div class="line">        cookie_jar = request.cookie_jar
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-143">
      <div class="info">
        Extracted source (around line <strong>#559</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>557</span>
<span>558</span>
<span>559</span>
<span>560</span>
<span>561</span>
<span>562</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          @last_check = mtime
</div><div class="line">        end
</div><div class="line active">        @app.call(env)
</div><div class="line">      end
</div><div class="line">
</div><div class="line">      private
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-144">
      <div class="info">
        Extracted source (around line <strong>#28</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>26</span>
<span>27</span>
<span>28</span>
<span>29</span>
<span>30</span>
<span>31</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      result = run_callbacks :call do
</div><div class="line">        begin
</div><div class="line active">          @app.call(env)
</div><div class="line">        rescue =&gt; error
</div><div class="line">        end
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-145">
      <div class="info">
        Extracted source (around line <strong>#98</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>96</span>
<span>97</span>
<span>98</span>
<span>99</span>
<span>100</span>
<span>101</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">      if callbacks.empty?
</div><div class="line active">        yield if block_given?
</div><div class="line">      else
</div><div class="line">        env = Filters::Environment.new(self, false, nil)
</div><div class="line">        next_sequence = callbacks.compile
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-146">
      <div class="info">
        Extracted source (around line <strong>#26</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
<span>29</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def call(env)
</div><div class="line">      error = nil
</div><div class="line active">      result = run_callbacks :call do
</div><div class="line">        begin
</div><div class="line">          @app.call(env)
</div><div class="line">        rescue =&gt; error
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-147">
      <div class="info">
        Extracted source (around line <strong>#14</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
<span>17</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      state = @executor.run!
</div><div class="line">      begin
</div><div class="line active">        response = @app.call(env)
</div><div class="line">        returned = response &lt;&lt; ::Rack::BodyProxy.new(response.pop) { state.complete! }
</div><div class="line">      ensure
</div><div class="line">        state.complete! unless returned
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-148">
      <div class="info">
        Extracted source (around line <strong>#61</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>59</span>
<span>60</span>
<span>61</span>
<span>62</span>
<span>63</span>
<span>64</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def call(env)
</div><div class="line">      request = ActionDispatch::Request.new env
</div><div class="line active">      _, headers, body = response = @app.call(env)
</div><div class="line">
</div><div class="line">      if headers["X-Cascade"] == "pass"
</div><div class="line">        body.close if body.respond_to?(:close)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-149">
      <div class="info">
        Extracted source (around line <strong>#135</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>133</span>
<span>134</span>
<span>135</span>
<span>136</span>
<span>137</span>
<span>138</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">      def call_app(env)
</div><div class="line active">        @app.call(env)
</div><div class="line">      rescue =&gt; e
</div><div class="line">        throw :app_exception, e
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-150">
      <div class="info">
        Extracted source (around line <strong>#30</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>28</span>
<span>29</span>
<span>30</span>
<span>31</span>
<span>32</span>
<span>33</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        end
</div><div class="line">
</div><div class="line active">        status, headers, body = call_app(env)
</div><div class="line">
</div><div class="line">        if (session = Session.from(Thread.current)) &amp;&amp; acceptable_content_type?(headers)
</div><div class="line">          headers["X-Web-Console-Session-Id"] = session.id
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-151">
      <div class="info">
        Extracted source (around line <strong>#20</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">    def call(env)
</div><div class="line active">      app_exception = catch :app_exception do
</div><div class="line">        request = create_regular_or_whiny_request(env)
</div><div class="line">        return call_app(env) unless request.from_whitelisted_ip?
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-152">
      <div class="info">
        Extracted source (around line <strong>#20</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">    def call(env)
</div><div class="line active">      app_exception = catch :app_exception do
</div><div class="line">        request = create_regular_or_whiny_request(env)
</div><div class="line">        return call_app(env) unless request.from_whitelisted_ip?
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-153">
      <div class="info">
        Extracted source (around line <strong>#33</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>31</span>
<span>32</span>
<span>33</span>
<span>34</span>
<span>35</span>
<span>36</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def call(env)
</div><div class="line">      request = ActionDispatch::Request.new env
</div><div class="line active">      @app.call(env)
</div><div class="line">    rescue Exception =&gt; exception
</div><div class="line">      if request.show_exceptions?
</div><div class="line">        render_exception(request, exception)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-154">
      <div class="info">
        Extracted source (around line <strong>#38</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>36</span>
<span>37</span>
<span>38</span>
<span>39</span>
<span>40</span>
<span>41</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          instrumenter.start "request.action_dispatch", request: request
</div><div class="line">          logger.info { started_request_message(request) }
</div><div class="line active">          status, headers, body = @app.call(env)
</div><div class="line">          body = ::Rack::BodyProxy.new(body) { finish(request) }
</div><div class="line">          [status, headers, body]
</div><div class="line">        rescue Exception
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-155">
      <div class="info">
        Extracted source (around line <strong>#26</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
<span>29</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        if logger.respond_to?(:tagged)
</div><div class="line active">          logger.tagged(compute_tags(request)) { call_app(request, env) }
</div><div class="line">        else
</div><div class="line">          call_app(request, env)
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-156">
      <div class="info">
        Extracted source (around line <strong>#71</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>69</span>
<span>70</span>
<span>71</span>
<span>72</span>
<span>73</span>
<span>74</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">    def tagged(*tags)
</div><div class="line active">      formatter.tagged(*tags) { yield self }
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    def flush
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-157">
      <div class="info">
        Extracted source (around line <strong>#28</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>26</span>
<span>27</span>
<span>28</span>
<span>29</span>
<span>30</span>
<span>31</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def tagged(*tags)
</div><div class="line">        new_tags = push_tags(*tags)
</div><div class="line active">        yield self
</div><div class="line">      ensure
</div><div class="line">        pop_tags(new_tags.size)
</div><div class="line">      end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-158">
      <div class="info">
        Extracted source (around line <strong>#71</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>69</span>
<span>70</span>
<span>71</span>
<span>72</span>
<span>73</span>
<span>74</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">    def tagged(*tags)
</div><div class="line active">      formatter.tagged(*tags) { yield self }
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    def flush
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-159">
      <div class="info">
        Extracted source (around line <strong>#26</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
<span>29</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        if logger.respond_to?(:tagged)
</div><div class="line active">          logger.tagged(compute_tags(request)) { call_app(request, env) }
</div><div class="line">        else
</div><div class="line">          call_app(request, env)
</div><div class="line">        end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-160">
      <div class="info">
        Extracted source (around line <strong>#13</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>11</span>
<span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          ::Rails.logger.silence { @app.call(env) }
</div><div class="line">        else
</div><div class="line active">          @app.call(env)
</div><div class="line">        end
</div><div class="line">      end
</div><div class="line">    end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-161">
      <div class="info">
        Extracted source (around line <strong>#81</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>79</span>
<span>80</span>
<span>81</span>
<span>82</span>
<span>83</span>
<span>84</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      req = ActionDispatch::Request.new env
</div><div class="line">      req.remote_ip = GetIp.new(req, check_ip, proxies)
</div><div class="line active">      @app.call(req.env)
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # The GetIp class exists as a way to defer processing of the request data
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-162">
      <div class="info">
        Extracted source (around line <strong>#19</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>17</span>
<span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
<span>22</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      RequestStore.begin!
</div><div class="line">
</div><div class="line active">      response = @app.call(env)
</div><div class="line">
</div><div class="line">      returned = response &lt;&lt; Rack::BodyProxy.new(response.pop) do
</div><div class="line">        RequestStore.end!
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-163">
      <div class="info">
        Extracted source (around line <strong>#27</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
<span>29</span>
<span>30</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      req = ActionDispatch::Request.new env
</div><div class="line">      req.request_id = make_request_id(req.x_request_id)
</div><div class="line active">      @app.call(env).tap { |_status, headers, _body| headers[X_REQUEST_ID] = req.request_id }
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    private
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-164">
      <div class="info">
        Extracted source (around line <strong>#22</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      end
</div><div class="line">
</div><div class="line active">      @app.call(env)
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    def method_override(env)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-165">
      <div class="info">
        Extracted source (around line <strong>#22</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def call(env)
</div><div class="line">      start_time = Utils.clock_time
</div><div class="line active">      status, headers, body = @app.call(env)
</div><div class="line">      request_time = Utils.clock_time - start_time
</div><div class="line">
</div><div class="line">      unless headers.has_key?(@header_name)
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-166">
      <div class="info">
        Extracted source (around line <strong>#29</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>27</span>
<span>28</span>
<span>29</span>
<span>30</span>
<span>31</span>
<span>32</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">          def call(env)
</div><div class="line">            LocalCacheRegistry.set_cache_for(local_cache_key, LocalStore.new)
</div><div class="line active">            response = @app.call(env)
</div><div class="line">            response[2] = ::Rack::BodyProxy.new(response[2]) do
</div><div class="line">              LocalCacheRegistry.set_cache_for(local_cache_key, nil)
</div><div class="line">            end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-167">
      <div class="info">
        Extracted source (around line <strong>#14</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
<span>17</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      state = @executor.run!
</div><div class="line">      begin
</div><div class="line active">        response = @app.call(env)
</div><div class="line">        returned = response &lt;&lt; ::Rack::BodyProxy.new(response.pop) { state.complete! }
</div><div class="line">      ensure
</div><div class="line">        state.complete! unless returned
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-168">
      <div class="info">
        Extracted source (around line <strong>#127</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>125</span>
<span>126</span>
<span>127</span>
<span>128</span>
<span>129</span>
<span>130</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      end
</div><div class="line">
</div><div class="line active">      @app.call(req.env)
</div><div class="line">    end
</div><div class="line">  end
</div><div class="line">end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-169">
      <div class="info">
        Extracted source (around line <strong>#111</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>109</span>
<span>110</span>
<span>111</span>
<span>112</span>
<span>113</span>
<span>114</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">    def call(env)
</div><div class="line active">      status, headers, body = @app.call(env)
</div><div class="line">      if body.respond_to?(:to_path)
</div><div class="line">        case type = variation(env)
</div><div class="line">        when 'X-Accel-Redirect'
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-170">
      <div class="info">
        Extracted source (around line <strong>#524</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>522</span>
<span>523</span>
<span>524</span>
<span>525</span>
<span>526</span>
<span>527</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">    def call(env)
</div><div class="line">      req = build_request env
</div><div class="line active">      app.call req.env
</div><div class="line">    end
</div><div class="line">
</div><div class="line">    # Defines additional Rack env configuration that is added on each call.
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-171">
      <div class="info">
        Extracted source (around line <strong>#225</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>223</span>
<span>224</span>
<span>225</span>
<span>226</span>
<span>227</span>
<span>228</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      def call(env)
</div><div class="line">        env[Const::PUMA_CONFIG] = @config
</div><div class="line active">        @app.call(env)
</div><div class="line">      end
</div><div class="line">    end
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-172">
      <div class="info">
        Extracted source (around line <strong>#658</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>656</span>
<span>657</span>
<span>658</span>
<span>659</span>
<span>660</span>
<span>661</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">      begin
</div><div class="line">        begin
</div><div class="line active">          status, headers, res_body = @app.call(env)
</div><div class="line">
</div><div class="line">          return :async if req.hijacked
</div><div class="line">
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-173">
      <div class="info">
        Extracted source (around line <strong>#472</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>470</span>
<span>471</span>
<span>472</span>
<span>473</span>
<span>474</span>
<span>475</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">        while true
</div><div class="line active">          case handle_request(client, buffer)
</div><div class="line">          when false
</div><div class="line">            return
</div><div class="line">          when :async
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-174">
      <div class="info">
        Extracted source (around line <strong>#332</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>330</span>
<span>331</span>
<span>332</span>
<span>333</span>
<span>334</span>
<span>335</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">        else
</div><div class="line">          if process_now
</div><div class="line active">            process_client client, buffer
</div><div class="line">          else
</div><div class="line">            client.set_timeout @first_data_timeout
</div><div class="line">            @reactor.add client
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>
    <div class="source hidden" id="frame-source-175">
      <div class="info">
        Extracted source (around line <strong>#133</strong>):
      </div>
      <div class="data">
        <table cellpadding="0" cellspacing="0" class="lines">
          <tbody><tr>
            <td>
              <pre class="line_numbers"><span>131</span>
<span>132</span>
<span>133</span>
<span>134</span>
<span>135</span>
<span>136</span>
              </pre>
            </td>
<td width="100%">
<pre><div class="line">
</div><div class="line">          begin
</div><div class="line active">            block.call(work, *extra)
</div><div class="line">          rescue Exception =&gt; e
</div><div class="line">            STDERR.puts "Error reached top of thread-pool: #{e.message} (#{e.class})"
</div><div class="line">          end
</div>
</pre>
</td>
          </tr>
        </tbody></table>
      </div>
    </div>


  <p></p>

  
<p><code>Rails.root: /Users/ryota/Desktop/ynutree2</code></p>

<div id="traces">
    <a href="http://localhost:3000/lectures/new#" onclick="hide(&#39;Framework-Trace&#39;);hide(&#39;Full-Trace&#39;);show(&#39;Application-Trace&#39;);; return false;">Application Trace</a> |
    <a href="http://localhost:3000/lectures/new#" onclick="hide(&#39;Application-Trace&#39;);hide(&#39;Full-Trace&#39;);show(&#39;Framework-Trace&#39;);; return false;">Framework Trace</a> |
    <a href="http://localhost:3000/lectures/new#" onclick="hide(&#39;Application-Trace&#39;);hide(&#39;Framework-Trace&#39;);show(&#39;Full-Trace&#39;);; return false;">Full Trace</a> 

    <div id="Application-Trace" style="display: block;">
      <pre><code><a class="trace-frames" data-frame-id="0" href="http://localhost:3000/lectures/new#">app/assets/stylesheets/lectures/lecture_new.css.scss:115</a><br><a class="trace-frames" data-frame-id="76" href="http://localhost:3000/lectures/new#">app/views/lectures/new.html.erb:2:in `_app_views_lectures_new_html_erb__786680008273212745_70275401639880'</a><br></code></pre>
    </div>
    <div id="Framework-Trace" style="display: none;">
      <pre><code><a class="trace-frames" data-frame-id="1" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/script/tree/funcall.rb:311:in `reformat_argument_error'</a><br><a class="trace-frames" data-frame-id="2" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/script/tree/funcall.rb:158:in `rescue in _perform'</a><br><a class="trace-frames" data-frame-id="3" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/script/tree/funcall.rb:128:in `_perform'</a><br><a class="trace-frames" data-frame-id="4" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/script/tree/node.rb:50:in `perform'</a><br><a class="trace-frames" data-frame-id="5" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:398:in `visit_prop'</a><br><a class="trace-frames" data-frame-id="6" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:36:in `visit'</a><br><a class="trace-frames" data-frame-id="7" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:158:in `block in visit'</a><br><a class="trace-frames" data-frame-id="8" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:79:in `block in with_base'</a><br><a class="trace-frames" data-frame-id="9" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:135:in `with_frame'</a><br><a class="trace-frames" data-frame-id="10" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:79:in `with_base'</a><br><a class="trace-frames" data-frame-id="11" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:158:in `visit'</a><br><a class="trace-frames" data-frame-id="12" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:440:in `block (2 levels) in visit_rule'</a><br><a class="trace-frames" data-frame-id="13" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:440:in `map'</a><br><a class="trace-frames" data-frame-id="14" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:440:in `block in visit_rule'</a><br><a class="trace-frames" data-frame-id="15" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:179:in `with_environment'</a><br><a class="trace-frames" data-frame-id="16" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:438:in `visit_rule'</a><br><a class="trace-frames" data-frame-id="17" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:36:in `visit'</a><br><a class="trace-frames" data-frame-id="18" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:158:in `block in visit'</a><br><a class="trace-frames" data-frame-id="19" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:79:in `block in with_base'</a><br><a class="trace-frames" data-frame-id="20" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:135:in `with_frame'</a><br><a class="trace-frames" data-frame-id="21" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:79:in `with_base'</a><br><a class="trace-frames" data-frame-id="22" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:158:in `visit'</a><br><a class="trace-frames" data-frame-id="23" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:52:in `block in visit_children'</a><br><a class="trace-frames" data-frame-id="24" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:52:in `map'</a><br><a class="trace-frames" data-frame-id="25" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:52:in `visit_children'</a><br><a class="trace-frames" data-frame-id="26" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:167:in `block in visit_children'</a><br><a class="trace-frames" data-frame-id="27" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:179:in `with_environment'</a><br><a class="trace-frames" data-frame-id="28" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:166:in `visit_children'</a><br><a class="trace-frames" data-frame-id="29" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:36:in `block in visit'</a><br><a class="trace-frames" data-frame-id="30" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:186:in `visit_root'</a><br><a class="trace-frames" data-frame-id="31" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:36:in `visit'</a><br><a class="trace-frames" data-frame-id="32" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:157:in `visit'</a><br><a class="trace-frames" data-frame-id="33" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:10:in `visit'</a><br><a class="trace-frames" data-frame-id="34" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/root_node.rb:36:in `css_tree'</a><br><a class="trace-frames" data-frame-id="35" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/root_node.rb:20:in `render'</a><br><a class="trace-frames" data-frame-id="36" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/engine.rb:290:in `render'</a><br><a class="trace-frames" data-frame-id="37" href="http://localhost:3000/lectures/new#">sass-rails (5.0.7) lib/sass/rails/template.rb:47:in `evaluate'</a><br><a class="trace-frames" data-frame-id="38" href="http://localhost:3000/lectures/new#">tilt (2.0.9) lib/tilt/template.rb:109:in `render'</a><br><a class="trace-frames" data-frame-id="39" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/legacy_tilt_processor.rb:25:in `call'</a><br><a class="trace-frames" data-frame-id="40" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:75:in `call_processor'</a><br><a class="trace-frames" data-frame-id="41" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:57:in `block in call_processors'</a><br><a class="trace-frames" data-frame-id="42" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:56:in `reverse_each'</a><br><a class="trace-frames" data-frame-id="43" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:56:in `call_processors'</a><br><a class="trace-frames" data-frame-id="44" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:134:in `load_from_unloaded'</a><br><a class="trace-frames" data-frame-id="45" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:60:in `block in load'</a><br><a class="trace-frames" data-frame-id="46" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:317:in `fetch_asset_from_dependency_cache'</a><br><a class="trace-frames" data-frame-id="47" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:44:in `load'</a><br><a class="trace-frames" data-frame-id="48" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/cached_environment.rb:20:in `block in initialize'</a><br><a class="trace-frames" data-frame-id="49" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/cached_environment.rb:47:in `load'</a><br><a class="trace-frames" data-frame-id="50" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/bundle.rb:23:in `block in call'</a><br><a class="trace-frames" data-frame-id="51" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/utils.rb:200:in `dfs'</a><br><a class="trace-frames" data-frame-id="52" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/bundle.rb:24:in `call'</a><br><a class="trace-frames" data-frame-id="53" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:75:in `call_processor'</a><br><a class="trace-frames" data-frame-id="54" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:57:in `block in call_processors'</a><br><a class="trace-frames" data-frame-id="55" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:56:in `reverse_each'</a><br><a class="trace-frames" data-frame-id="56" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:56:in `call_processors'</a><br><a class="trace-frames" data-frame-id="57" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:134:in `load_from_unloaded'</a><br><a class="trace-frames" data-frame-id="58" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:60:in `block in load'</a><br><a class="trace-frames" data-frame-id="59" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:317:in `fetch_asset_from_dependency_cache'</a><br><a class="trace-frames" data-frame-id="60" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:44:in `load'</a><br><a class="trace-frames" data-frame-id="61" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/cached_environment.rb:20:in `block in initialize'</a><br><a class="trace-frames" data-frame-id="62" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/cached_environment.rb:47:in `load'</a><br><a class="trace-frames" data-frame-id="63" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/base.rb:66:in `find_asset'</a><br><a class="trace-frames" data-frame-id="64" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/base.rb:92:in `[]'</a><br><a class="trace-frames" data-frame-id="65" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:355:in `find_asset'</a><br><a class="trace-frames" data-frame-id="66" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:347:in `find_debug_asset'</a><br><a class="trace-frames" data-frame-id="67" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:229:in `block in lookup_debug_asset'</a><br><a class="trace-frames" data-frame-id="68" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:242:in `block in resolve_asset'</a><br><a class="trace-frames" data-frame-id="69" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:241:in `each'</a><br><a class="trace-frames" data-frame-id="70" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:241:in `detect'</a><br><a class="trace-frames" data-frame-id="71" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:241:in `resolve_asset'</a><br><a class="trace-frames" data-frame-id="72" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:228:in `lookup_debug_asset'</a><br><a class="trace-frames" data-frame-id="73" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:170:in `block in stylesheet_link_tag'</a><br><a class="trace-frames" data-frame-id="74" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:169:in `map'</a><br><a class="trace-frames" data-frame-id="75" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:169:in `stylesheet_link_tag'</a><br><a class="trace-frames" data-frame-id="77" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/template.rb:159:in `block in render'</a><br><a class="trace-frames" data-frame-id="78" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:170:in `instrument'</a><br><a class="trace-frames" data-frame-id="79" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/template.rb:354:in `instrument_render_template'</a><br><a class="trace-frames" data-frame-id="80" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/template.rb:157:in `render'</a><br><a class="trace-frames" data-frame-id="81" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:54:in `block (2 levels) in render_template'</a><br><a class="trace-frames" data-frame-id="82" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/abstract_renderer.rb:44:in `block in instrument'</a><br><a class="trace-frames" data-frame-id="83" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:168:in `block in instrument'</a><br><a class="trace-frames" data-frame-id="84" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications/instrumenter.rb:23:in `instrument'</a><br><a class="trace-frames" data-frame-id="85" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:168:in `instrument'</a><br><a class="trace-frames" data-frame-id="86" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/abstract_renderer.rb:43:in `instrument'</a><br><a class="trace-frames" data-frame-id="87" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:53:in `block in render_template'</a><br><a class="trace-frames" data-frame-id="88" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:61:in `render_with_layout'</a><br><a class="trace-frames" data-frame-id="89" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:52:in `render_template'</a><br><a class="trace-frames" data-frame-id="90" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:16:in `render'</a><br><a class="trace-frames" data-frame-id="91" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/renderer.rb:44:in `render_template'</a><br><a class="trace-frames" data-frame-id="92" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/renderer.rb:25:in `render'</a><br><a class="trace-frames" data-frame-id="93" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/rendering.rb:103:in `_render_template'</a><br><a class="trace-frames" data-frame-id="94" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/streaming.rb:219:in `_render_template'</a><br><a class="trace-frames" data-frame-id="95" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/rendering.rb:84:in `render_to_body'</a><br><a class="trace-frames" data-frame-id="96" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/rendering.rb:52:in `render_to_body'</a><br><a class="trace-frames" data-frame-id="97" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/renderers.rb:142:in `render_to_body'</a><br><a class="trace-frames" data-frame-id="98" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/rendering.rb:25:in `render'</a><br><a class="trace-frames" data-frame-id="99" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/rendering.rb:36:in `render'</a><br><a class="trace-frames" data-frame-id="100" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:46:in `block (2 levels) in render'</a><br><a class="trace-frames" data-frame-id="101" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/core_ext/benchmark.rb:14:in `block in ms'</a><br><a class="trace-frames" data-frame-id="102" href="http://localhost:3000/lectures/new#">/Users/ryota/.rbenv/versions/2.4.1/lib/ruby/2.4.0/benchmark.rb:308:in `realtime'</a><br><a class="trace-frames" data-frame-id="103" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/core_ext/benchmark.rb:14:in `ms'</a><br><a class="trace-frames" data-frame-id="104" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:46:in `block in render'</a><br><a class="trace-frames" data-frame-id="105" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:87:in `cleanup_view_runtime'</a><br><a class="trace-frames" data-frame-id="106" href="http://localhost:3000/lectures/new#">activerecord (5.2.2.1) lib/active_record/railties/controller_runtime.rb:31:in `cleanup_view_runtime'</a><br><a class="trace-frames" data-frame-id="107" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:45:in `render'</a><br><a class="trace-frames" data-frame-id="108" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/implicit_render.rb:35:in `default_render'</a><br><a class="trace-frames" data-frame-id="109" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/basic_implicit_render.rb:6:in `block in send_action'</a><br><a class="trace-frames" data-frame-id="110" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/basic_implicit_render.rb:6:in `tap'</a><br><a class="trace-frames" data-frame-id="111" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'</a><br><a class="trace-frames" data-frame-id="112" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/base.rb:194:in `process_action'</a><br><a class="trace-frames" data-frame-id="113" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/rendering.rb:30:in `process_action'</a><br><a class="trace-frames" data-frame-id="114" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/callbacks.rb:42:in `block in process_action'</a><br><a class="trace-frames" data-frame-id="115" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/callbacks.rb:132:in `run_callbacks'</a><br><a class="trace-frames" data-frame-id="116" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/callbacks.rb:41:in `process_action'</a><br><a class="trace-frames" data-frame-id="117" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/rescue.rb:22:in `process_action'</a><br><a class="trace-frames" data-frame-id="118" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:34:in `block in process_action'</a><br><a class="trace-frames" data-frame-id="119" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:168:in `block in instrument'</a><br><a class="trace-frames" data-frame-id="120" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications/instrumenter.rb:23:in `instrument'</a><br><a class="trace-frames" data-frame-id="121" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:168:in `instrument'</a><br><a class="trace-frames" data-frame-id="122" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:32:in `process_action'</a><br><a class="trace-frames" data-frame-id="123" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/params_wrapper.rb:256:in `process_action'</a><br><a class="trace-frames" data-frame-id="124" href="http://localhost:3000/lectures/new#">activerecord (5.2.2.1) lib/active_record/railties/controller_runtime.rb:24:in `process_action'</a><br><a class="trace-frames" data-frame-id="125" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/base.rb:134:in `process'</a><br><a class="trace-frames" data-frame-id="126" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/rendering.rb:32:in `process'</a><br><a class="trace-frames" data-frame-id="127" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal.rb:191:in `dispatch'</a><br><a class="trace-frames" data-frame-id="128" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal.rb:252:in `dispatch'</a><br><a class="trace-frames" data-frame-id="129" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/routing/route_set.rb:52:in `dispatch'</a><br><a class="trace-frames" data-frame-id="130" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/routing/route_set.rb:34:in `serve'</a><br><a class="trace-frames" data-frame-id="131" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/journey/router.rb:52:in `block in serve'</a><br><a class="trace-frames" data-frame-id="132" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/journey/router.rb:35:in `each'</a><br><a class="trace-frames" data-frame-id="133" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/journey/router.rb:35:in `serve'</a><br><a class="trace-frames" data-frame-id="134" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/routing/route_set.rb:840:in `call'</a><br><a class="trace-frames" data-frame-id="135" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/tempfile_reaper.rb:15:in `call'</a><br><a class="trace-frames" data-frame-id="136" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/etag.rb:25:in `call'</a><br><a class="trace-frames" data-frame-id="137" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/conditional_get.rb:25:in `call'</a><br><a class="trace-frames" data-frame-id="138" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/head.rb:12:in `call'</a><br><a class="trace-frames" data-frame-id="139" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/http/content_security_policy.rb:18:in `call'</a><br><a class="trace-frames" data-frame-id="140" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/session/abstract/id.rb:232:in `context'</a><br><a class="trace-frames" data-frame-id="141" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/session/abstract/id.rb:226:in `call'</a><br><a class="trace-frames" data-frame-id="142" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/cookies.rb:670:in `call'</a><br><a class="trace-frames" data-frame-id="143" href="http://localhost:3000/lectures/new#">activerecord (5.2.2.1) lib/active_record/migration.rb:559:in `call'</a><br><a class="trace-frames" data-frame-id="144" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/callbacks.rb:28:in `block in call'</a><br><a class="trace-frames" data-frame-id="145" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/callbacks.rb:98:in `run_callbacks'</a><br><a class="trace-frames" data-frame-id="146" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'</a><br><a class="trace-frames" data-frame-id="147" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/executor.rb:14:in `call'</a><br><a class="trace-frames" data-frame-id="148" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/debug_exceptions.rb:61:in `call'</a><br><a class="trace-frames" data-frame-id="149" href="http://localhost:3000/lectures/new#">web-console (3.7.0) lib/web_console/middleware.rb:135:in `call_app'</a><br><a class="trace-frames" data-frame-id="150" href="http://localhost:3000/lectures/new#">web-console (3.7.0) lib/web_console/middleware.rb:30:in `block in call'</a><br><a class="trace-frames" data-frame-id="151" href="http://localhost:3000/lectures/new#">web-console (3.7.0) lib/web_console/middleware.rb:20:in `catch'</a><br><a class="trace-frames" data-frame-id="152" href="http://localhost:3000/lectures/new#">web-console (3.7.0) lib/web_console/middleware.rb:20:in `call'</a><br><a class="trace-frames" data-frame-id="153" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/show_exceptions.rb:33:in `call'</a><br><a class="trace-frames" data-frame-id="154" href="http://localhost:3000/lectures/new#">railties (5.2.2.1) lib/rails/rack/logger.rb:38:in `call_app'</a><br><a class="trace-frames" data-frame-id="155" href="http://localhost:3000/lectures/new#">railties (5.2.2.1) lib/rails/rack/logger.rb:26:in `block in call'</a><br><a class="trace-frames" data-frame-id="156" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/tagged_logging.rb:71:in `block in tagged'</a><br><a class="trace-frames" data-frame-id="157" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/tagged_logging.rb:28:in `tagged'</a><br><a class="trace-frames" data-frame-id="158" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/tagged_logging.rb:71:in `tagged'</a><br><a class="trace-frames" data-frame-id="159" href="http://localhost:3000/lectures/new#">railties (5.2.2.1) lib/rails/rack/logger.rb:26:in `call'</a><br><a class="trace-frames" data-frame-id="160" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/quiet_assets.rb:13:in `call'</a><br><a class="trace-frames" data-frame-id="161" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/remote_ip.rb:81:in `call'</a><br><a class="trace-frames" data-frame-id="162" href="http://localhost:3000/lectures/new#">request_store (1.4.1) lib/request_store/middleware.rb:19:in `call'</a><br><a class="trace-frames" data-frame-id="163" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/request_id.rb:27:in `call'</a><br><a class="trace-frames" data-frame-id="164" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/method_override.rb:22:in `call'</a><br><a class="trace-frames" data-frame-id="165" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/runtime.rb:22:in `call'</a><br><a class="trace-frames" data-frame-id="166" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'</a><br><a class="trace-frames" data-frame-id="167" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/executor.rb:14:in `call'</a><br><a class="trace-frames" data-frame-id="168" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/static.rb:127:in `call'</a><br><a class="trace-frames" data-frame-id="169" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/sendfile.rb:111:in `call'</a><br><a class="trace-frames" data-frame-id="170" href="http://localhost:3000/lectures/new#">railties (5.2.2.1) lib/rails/engine.rb:524:in `call'</a><br><a class="trace-frames" data-frame-id="171" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/configuration.rb:225:in `call'</a><br><a class="trace-frames" data-frame-id="172" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/server.rb:658:in `handle_request'</a><br><a class="trace-frames" data-frame-id="173" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/server.rb:472:in `process_client'</a><br><a class="trace-frames" data-frame-id="174" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/server.rb:332:in `block in run'</a><br><a class="trace-frames" data-frame-id="175" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/thread_pool.rb:133:in `block in spawn_thread'</a><br></code></pre>
    </div>
    <div id="Full-Trace" style="display: none;">
      <pre><code><a class="trace-frames" data-frame-id="0" href="http://localhost:3000/lectures/new#">app/assets/stylesheets/lectures/lecture_new.css.scss:115</a><br><a class="trace-frames" data-frame-id="1" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/script/tree/funcall.rb:311:in `reformat_argument_error'</a><br><a class="trace-frames" data-frame-id="2" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/script/tree/funcall.rb:158:in `rescue in _perform'</a><br><a class="trace-frames" data-frame-id="3" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/script/tree/funcall.rb:128:in `_perform'</a><br><a class="trace-frames" data-frame-id="4" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/script/tree/node.rb:50:in `perform'</a><br><a class="trace-frames" data-frame-id="5" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:398:in `visit_prop'</a><br><a class="trace-frames" data-frame-id="6" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:36:in `visit'</a><br><a class="trace-frames" data-frame-id="7" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:158:in `block in visit'</a><br><a class="trace-frames" data-frame-id="8" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:79:in `block in with_base'</a><br><a class="trace-frames" data-frame-id="9" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:135:in `with_frame'</a><br><a class="trace-frames" data-frame-id="10" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:79:in `with_base'</a><br><a class="trace-frames" data-frame-id="11" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:158:in `visit'</a><br><a class="trace-frames" data-frame-id="12" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:440:in `block (2 levels) in visit_rule'</a><br><a class="trace-frames" data-frame-id="13" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:440:in `map'</a><br><a class="trace-frames" data-frame-id="14" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:440:in `block in visit_rule'</a><br><a class="trace-frames" data-frame-id="15" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:179:in `with_environment'</a><br><a class="trace-frames" data-frame-id="16" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:438:in `visit_rule'</a><br><a class="trace-frames" data-frame-id="17" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:36:in `visit'</a><br><a class="trace-frames" data-frame-id="18" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:158:in `block in visit'</a><br><a class="trace-frames" data-frame-id="19" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:79:in `block in with_base'</a><br><a class="trace-frames" data-frame-id="20" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:135:in `with_frame'</a><br><a class="trace-frames" data-frame-id="21" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/stack.rb:79:in `with_base'</a><br><a class="trace-frames" data-frame-id="22" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:158:in `visit'</a><br><a class="trace-frames" data-frame-id="23" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:52:in `block in visit_children'</a><br><a class="trace-frames" data-frame-id="24" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:52:in `map'</a><br><a class="trace-frames" data-frame-id="25" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:52:in `visit_children'</a><br><a class="trace-frames" data-frame-id="26" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:167:in `block in visit_children'</a><br><a class="trace-frames" data-frame-id="27" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:179:in `with_environment'</a><br><a class="trace-frames" data-frame-id="28" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:166:in `visit_children'</a><br><a class="trace-frames" data-frame-id="29" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:36:in `block in visit'</a><br><a class="trace-frames" data-frame-id="30" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:186:in `visit_root'</a><br><a class="trace-frames" data-frame-id="31" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/base.rb:36:in `visit'</a><br><a class="trace-frames" data-frame-id="32" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:157:in `visit'</a><br><a class="trace-frames" data-frame-id="33" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/visitors/perform.rb:10:in `visit'</a><br><a class="trace-frames" data-frame-id="34" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/root_node.rb:36:in `css_tree'</a><br><a class="trace-frames" data-frame-id="35" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/tree/root_node.rb:20:in `render'</a><br><a class="trace-frames" data-frame-id="36" href="http://localhost:3000/lectures/new#">sass (3.7.3) lib/sass/engine.rb:290:in `render'</a><br><a class="trace-frames" data-frame-id="37" href="http://localhost:3000/lectures/new#">sass-rails (5.0.7) lib/sass/rails/template.rb:47:in `evaluate'</a><br><a class="trace-frames" data-frame-id="38" href="http://localhost:3000/lectures/new#">tilt (2.0.9) lib/tilt/template.rb:109:in `render'</a><br><a class="trace-frames" data-frame-id="39" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/legacy_tilt_processor.rb:25:in `call'</a><br><a class="trace-frames" data-frame-id="40" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:75:in `call_processor'</a><br><a class="trace-frames" data-frame-id="41" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:57:in `block in call_processors'</a><br><a class="trace-frames" data-frame-id="42" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:56:in `reverse_each'</a><br><a class="trace-frames" data-frame-id="43" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:56:in `call_processors'</a><br><a class="trace-frames" data-frame-id="44" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:134:in `load_from_unloaded'</a><br><a class="trace-frames" data-frame-id="45" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:60:in `block in load'</a><br><a class="trace-frames" data-frame-id="46" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:317:in `fetch_asset_from_dependency_cache'</a><br><a class="trace-frames" data-frame-id="47" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:44:in `load'</a><br><a class="trace-frames" data-frame-id="48" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/cached_environment.rb:20:in `block in initialize'</a><br><a class="trace-frames" data-frame-id="49" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/cached_environment.rb:47:in `load'</a><br><a class="trace-frames" data-frame-id="50" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/bundle.rb:23:in `block in call'</a><br><a class="trace-frames" data-frame-id="51" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/utils.rb:200:in `dfs'</a><br><a class="trace-frames" data-frame-id="52" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/bundle.rb:24:in `call'</a><br><a class="trace-frames" data-frame-id="53" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:75:in `call_processor'</a><br><a class="trace-frames" data-frame-id="54" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:57:in `block in call_processors'</a><br><a class="trace-frames" data-frame-id="55" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:56:in `reverse_each'</a><br><a class="trace-frames" data-frame-id="56" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/processor_utils.rb:56:in `call_processors'</a><br><a class="trace-frames" data-frame-id="57" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:134:in `load_from_unloaded'</a><br><a class="trace-frames" data-frame-id="58" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:60:in `block in load'</a><br><a class="trace-frames" data-frame-id="59" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:317:in `fetch_asset_from_dependency_cache'</a><br><a class="trace-frames" data-frame-id="60" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/loader.rb:44:in `load'</a><br><a class="trace-frames" data-frame-id="61" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/cached_environment.rb:20:in `block in initialize'</a><br><a class="trace-frames" data-frame-id="62" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/cached_environment.rb:47:in `load'</a><br><a class="trace-frames" data-frame-id="63" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/base.rb:66:in `find_asset'</a><br><a class="trace-frames" data-frame-id="64" href="http://localhost:3000/lectures/new#">sprockets (3.7.2) lib/sprockets/base.rb:92:in `[]'</a><br><a class="trace-frames" data-frame-id="65" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:355:in `find_asset'</a><br><a class="trace-frames" data-frame-id="66" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:347:in `find_debug_asset'</a><br><a class="trace-frames" data-frame-id="67" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:229:in `block in lookup_debug_asset'</a><br><a class="trace-frames" data-frame-id="68" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:242:in `block in resolve_asset'</a><br><a class="trace-frames" data-frame-id="69" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:241:in `each'</a><br><a class="trace-frames" data-frame-id="70" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:241:in `detect'</a><br><a class="trace-frames" data-frame-id="71" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:241:in `resolve_asset'</a><br><a class="trace-frames" data-frame-id="72" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:228:in `lookup_debug_asset'</a><br><a class="trace-frames" data-frame-id="73" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:170:in `block in stylesheet_link_tag'</a><br><a class="trace-frames" data-frame-id="74" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:169:in `map'</a><br><a class="trace-frames" data-frame-id="75" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/helper.rb:169:in `stylesheet_link_tag'</a><br><a class="trace-frames" data-frame-id="76" href="http://localhost:3000/lectures/new#">app/views/lectures/new.html.erb:2:in `_app_views_lectures_new_html_erb__786680008273212745_70275401639880'</a><br><a class="trace-frames" data-frame-id="77" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/template.rb:159:in `block in render'</a><br><a class="trace-frames" data-frame-id="78" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:170:in `instrument'</a><br><a class="trace-frames" data-frame-id="79" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/template.rb:354:in `instrument_render_template'</a><br><a class="trace-frames" data-frame-id="80" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/template.rb:157:in `render'</a><br><a class="trace-frames" data-frame-id="81" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:54:in `block (2 levels) in render_template'</a><br><a class="trace-frames" data-frame-id="82" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/abstract_renderer.rb:44:in `block in instrument'</a><br><a class="trace-frames" data-frame-id="83" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:168:in `block in instrument'</a><br><a class="trace-frames" data-frame-id="84" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications/instrumenter.rb:23:in `instrument'</a><br><a class="trace-frames" data-frame-id="85" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:168:in `instrument'</a><br><a class="trace-frames" data-frame-id="86" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/abstract_renderer.rb:43:in `instrument'</a><br><a class="trace-frames" data-frame-id="87" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:53:in `block in render_template'</a><br><a class="trace-frames" data-frame-id="88" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:61:in `render_with_layout'</a><br><a class="trace-frames" data-frame-id="89" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:52:in `render_template'</a><br><a class="trace-frames" data-frame-id="90" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/template_renderer.rb:16:in `render'</a><br><a class="trace-frames" data-frame-id="91" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/renderer.rb:44:in `render_template'</a><br><a class="trace-frames" data-frame-id="92" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/renderer/renderer.rb:25:in `render'</a><br><a class="trace-frames" data-frame-id="93" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/rendering.rb:103:in `_render_template'</a><br><a class="trace-frames" data-frame-id="94" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/streaming.rb:219:in `_render_template'</a><br><a class="trace-frames" data-frame-id="95" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/rendering.rb:84:in `render_to_body'</a><br><a class="trace-frames" data-frame-id="96" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/rendering.rb:52:in `render_to_body'</a><br><a class="trace-frames" data-frame-id="97" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/renderers.rb:142:in `render_to_body'</a><br><a class="trace-frames" data-frame-id="98" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/rendering.rb:25:in `render'</a><br><a class="trace-frames" data-frame-id="99" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/rendering.rb:36:in `render'</a><br><a class="trace-frames" data-frame-id="100" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:46:in `block (2 levels) in render'</a><br><a class="trace-frames" data-frame-id="101" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/core_ext/benchmark.rb:14:in `block in ms'</a><br><a class="trace-frames" data-frame-id="102" href="http://localhost:3000/lectures/new#">/Users/ryota/.rbenv/versions/2.4.1/lib/ruby/2.4.0/benchmark.rb:308:in `realtime'</a><br><a class="trace-frames" data-frame-id="103" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/core_ext/benchmark.rb:14:in `ms'</a><br><a class="trace-frames" data-frame-id="104" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:46:in `block in render'</a><br><a class="trace-frames" data-frame-id="105" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:87:in `cleanup_view_runtime'</a><br><a class="trace-frames" data-frame-id="106" href="http://localhost:3000/lectures/new#">activerecord (5.2.2.1) lib/active_record/railties/controller_runtime.rb:31:in `cleanup_view_runtime'</a><br><a class="trace-frames" data-frame-id="107" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:45:in `render'</a><br><a class="trace-frames" data-frame-id="108" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/implicit_render.rb:35:in `default_render'</a><br><a class="trace-frames" data-frame-id="109" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/basic_implicit_render.rb:6:in `block in send_action'</a><br><a class="trace-frames" data-frame-id="110" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/basic_implicit_render.rb:6:in `tap'</a><br><a class="trace-frames" data-frame-id="111" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'</a><br><a class="trace-frames" data-frame-id="112" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/base.rb:194:in `process_action'</a><br><a class="trace-frames" data-frame-id="113" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/rendering.rb:30:in `process_action'</a><br><a class="trace-frames" data-frame-id="114" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/callbacks.rb:42:in `block in process_action'</a><br><a class="trace-frames" data-frame-id="115" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/callbacks.rb:132:in `run_callbacks'</a><br><a class="trace-frames" data-frame-id="116" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/callbacks.rb:41:in `process_action'</a><br><a class="trace-frames" data-frame-id="117" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/rescue.rb:22:in `process_action'</a><br><a class="trace-frames" data-frame-id="118" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:34:in `block in process_action'</a><br><a class="trace-frames" data-frame-id="119" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:168:in `block in instrument'</a><br><a class="trace-frames" data-frame-id="120" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications/instrumenter.rb:23:in `instrument'</a><br><a class="trace-frames" data-frame-id="121" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/notifications.rb:168:in `instrument'</a><br><a class="trace-frames" data-frame-id="122" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/instrumentation.rb:32:in `process_action'</a><br><a class="trace-frames" data-frame-id="123" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal/params_wrapper.rb:256:in `process_action'</a><br><a class="trace-frames" data-frame-id="124" href="http://localhost:3000/lectures/new#">activerecord (5.2.2.1) lib/active_record/railties/controller_runtime.rb:24:in `process_action'</a><br><a class="trace-frames" data-frame-id="125" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/abstract_controller/base.rb:134:in `process'</a><br><a class="trace-frames" data-frame-id="126" href="http://localhost:3000/lectures/new#">actionview (5.2.2.1) lib/action_view/rendering.rb:32:in `process'</a><br><a class="trace-frames" data-frame-id="127" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal.rb:191:in `dispatch'</a><br><a class="trace-frames" data-frame-id="128" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_controller/metal.rb:252:in `dispatch'</a><br><a class="trace-frames" data-frame-id="129" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/routing/route_set.rb:52:in `dispatch'</a><br><a class="trace-frames" data-frame-id="130" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/routing/route_set.rb:34:in `serve'</a><br><a class="trace-frames" data-frame-id="131" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/journey/router.rb:52:in `block in serve'</a><br><a class="trace-frames" data-frame-id="132" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/journey/router.rb:35:in `each'</a><br><a class="trace-frames" data-frame-id="133" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/journey/router.rb:35:in `serve'</a><br><a class="trace-frames" data-frame-id="134" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/routing/route_set.rb:840:in `call'</a><br><a class="trace-frames" data-frame-id="135" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/tempfile_reaper.rb:15:in `call'</a><br><a class="trace-frames" data-frame-id="136" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/etag.rb:25:in `call'</a><br><a class="trace-frames" data-frame-id="137" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/conditional_get.rb:25:in `call'</a><br><a class="trace-frames" data-frame-id="138" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/head.rb:12:in `call'</a><br><a class="trace-frames" data-frame-id="139" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/http/content_security_policy.rb:18:in `call'</a><br><a class="trace-frames" data-frame-id="140" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/session/abstract/id.rb:232:in `context'</a><br><a class="trace-frames" data-frame-id="141" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/session/abstract/id.rb:226:in `call'</a><br><a class="trace-frames" data-frame-id="142" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/cookies.rb:670:in `call'</a><br><a class="trace-frames" data-frame-id="143" href="http://localhost:3000/lectures/new#">activerecord (5.2.2.1) lib/active_record/migration.rb:559:in `call'</a><br><a class="trace-frames" data-frame-id="144" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/callbacks.rb:28:in `block in call'</a><br><a class="trace-frames" data-frame-id="145" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/callbacks.rb:98:in `run_callbacks'</a><br><a class="trace-frames" data-frame-id="146" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'</a><br><a class="trace-frames" data-frame-id="147" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/executor.rb:14:in `call'</a><br><a class="trace-frames" data-frame-id="148" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/debug_exceptions.rb:61:in `call'</a><br><a class="trace-frames" data-frame-id="149" href="http://localhost:3000/lectures/new#">web-console (3.7.0) lib/web_console/middleware.rb:135:in `call_app'</a><br><a class="trace-frames" data-frame-id="150" href="http://localhost:3000/lectures/new#">web-console (3.7.0) lib/web_console/middleware.rb:30:in `block in call'</a><br><a class="trace-frames" data-frame-id="151" href="http://localhost:3000/lectures/new#">web-console (3.7.0) lib/web_console/middleware.rb:20:in `catch'</a><br><a class="trace-frames" data-frame-id="152" href="http://localhost:3000/lectures/new#">web-console (3.7.0) lib/web_console/middleware.rb:20:in `call'</a><br><a class="trace-frames" data-frame-id="153" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/show_exceptions.rb:33:in `call'</a><br><a class="trace-frames" data-frame-id="154" href="http://localhost:3000/lectures/new#">railties (5.2.2.1) lib/rails/rack/logger.rb:38:in `call_app'</a><br><a class="trace-frames" data-frame-id="155" href="http://localhost:3000/lectures/new#">railties (5.2.2.1) lib/rails/rack/logger.rb:26:in `block in call'</a><br><a class="trace-frames" data-frame-id="156" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/tagged_logging.rb:71:in `block in tagged'</a><br><a class="trace-frames" data-frame-id="157" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/tagged_logging.rb:28:in `tagged'</a><br><a class="trace-frames" data-frame-id="158" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/tagged_logging.rb:71:in `tagged'</a><br><a class="trace-frames" data-frame-id="159" href="http://localhost:3000/lectures/new#">railties (5.2.2.1) lib/rails/rack/logger.rb:26:in `call'</a><br><a class="trace-frames" data-frame-id="160" href="http://localhost:3000/lectures/new#">sprockets-rails (3.2.1) lib/sprockets/rails/quiet_assets.rb:13:in `call'</a><br><a class="trace-frames" data-frame-id="161" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/remote_ip.rb:81:in `call'</a><br><a class="trace-frames" data-frame-id="162" href="http://localhost:3000/lectures/new#">request_store (1.4.1) lib/request_store/middleware.rb:19:in `call'</a><br><a class="trace-frames" data-frame-id="163" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/request_id.rb:27:in `call'</a><br><a class="trace-frames" data-frame-id="164" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/method_override.rb:22:in `call'</a><br><a class="trace-frames" data-frame-id="165" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/runtime.rb:22:in `call'</a><br><a class="trace-frames" data-frame-id="166" href="http://localhost:3000/lectures/new#">activesupport (5.2.2.1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'</a><br><a class="trace-frames" data-frame-id="167" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/executor.rb:14:in `call'</a><br><a class="trace-frames" data-frame-id="168" href="http://localhost:3000/lectures/new#">actionpack (5.2.2.1) lib/action_dispatch/middleware/static.rb:127:in `call'</a><br><a class="trace-frames" data-frame-id="169" href="http://localhost:3000/lectures/new#">rack (2.0.6) lib/rack/sendfile.rb:111:in `call'</a><br><a class="trace-frames" data-frame-id="170" href="http://localhost:3000/lectures/new#">railties (5.2.2.1) lib/rails/engine.rb:524:in `call'</a><br><a class="trace-frames" data-frame-id="171" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/configuration.rb:225:in `call'</a><br><a class="trace-frames" data-frame-id="172" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/server.rb:658:in `handle_request'</a><br><a class="trace-frames" data-frame-id="173" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/server.rb:472:in `process_client'</a><br><a class="trace-frames" data-frame-id="174" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/server.rb:332:in `block in run'</a><br><a class="trace-frames" data-frame-id="175" href="http://localhost:3000/lectures/new#">puma (3.12.0) lib/puma/thread_pool.rb:133:in `block in spawn_thread'</a><br></code></pre>
    </div>

  <script type="text/javascript">
    var traceFrames = document.getElementsByClassName('trace-frames');
    var selectedFrame, currentSource = document.getElementById('frame-source-0');

    // Add click listeners for all stack frames
    for (var i = 0; i < traceFrames.length; i++) {
      traceFrames[i].addEventListener('click', function(e) {
        e.preventDefault();
        var target = e.target;
        var frame_id = target.dataset.frameId;

        if (selectedFrame) {
          selectedFrame.className = selectedFrame.className.replace("selected", "");
        }

        target.className += " selected";
        selectedFrame = target;

        // Change the extracted source code
        changeSourceExtract(frame_id);
      });

      function changeSourceExtract(frame_id) {
        var el = document.getElementById('frame-source-' + frame_id);
        if (currentSource && el) {
          currentSource.className += " hidden";
          el.className = el.className.replace(" hidden", "");
          currentSource = el;
        }
      }
    }
  </script>
</div>

  
<h2 style="margin-top: 30px">Request</h2>
<p><b>Parameters</b>:</p> <pre>None</pre>

<div class="details">
  <div class="summary"><a href="http://localhost:3000/lectures/new#" onclick="return toggleSessionDump()">Toggle session dump</a></div>
  <div id="session_dump" style="display:none"><pre>_csrf_token: "k9YxqTd2EVqoowi/Y3BrJtsSL3J3IDcbatgFfG8Js/4="
session_id: "e66cd51129712b218067bdc09b5cf34b"</pre></div>
</div>

<div class="details">
  <div class="summary"><a href="http://localhost:3000/lectures/new#" onclick="return toggleEnvDump()">Toggle env dump</a></div>
  <div id="env_dump" style="display:none"><pre>GATEWAY_INTERFACE: "CGI/1.2"
HTTP_ACCEPT: "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
HTTP_ACCEPT_ENCODING: "gzip, deflate, br"
HTTP_ACCEPT_LANGUAGE: "ja,en-US;q=0.9,en;q=0.8"
HTTP_CACHE_CONTROL: "max-age=0"
HTTP_VERSION: "HTTP/1.1"
ORIGINAL_SCRIPT_NAME: ""
REMOTE_ADDR: "127.0.0.1"
SERVER_NAME: "localhost"
SERVER_PROTOCOL: "HTTP/1.1"</pre></div>
</div>

<h2 style="margin-top: 30px">Response</h2>
<p><b>Headers</b>:</p> <pre>None</pre>

</div>


<div id="console" data-mount-point="/__web_console" data-session-id="2da3f46c078187ae95014653ff96aedf" data-prompt-label="&gt;&gt; " class=" console"><div class="resizer layer pos-absolute border-box"></div>
<div class="console-outer layer pos-absolute border-box">
  <div class="console-actions pos-fixed pos-right">
    <div class="close-button button border-box" title="close">x</div>
  </div>
  <div class="console-inner"><div class="console-prompt-box"><span class="console-prompt-label">&gt;&gt; </span>
<pre class="console-prompt-display"><span class=" console-cursor">&nbsp;</span></pre>
</div></div>
</div>
<input class="clipboard" type="text">
</div>


<script type="text/javascript" data-template="console">
(function() {
  /**
 * Constructor for command storage.
 * It uses localStorage if available. Otherwise fallback to normal JS array.
 */
function CommandStorage() {
  this.previousCommands = [];
  var previousCommandOffset = 0;
  var hasLocalStorage = typeof window.localStorage !== 'undefined';
  var STORAGE_KEY = "web_console_previous_commands";
  var MAX_STORAGE = 100;

  if (hasLocalStorage) {
    this.previousCommands = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
    previousCommandOffset = this.previousCommands.length;
  }

  this.addCommand = function(command) {
    previousCommandOffset = this.previousCommands.push(command);

    if (previousCommandOffset > MAX_STORAGE) {
      this.previousCommands.splice(0, 1);
      previousCommandOffset = MAX_STORAGE;
    }

    if (hasLocalStorage) {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.previousCommands));
    }
  };

  this.navigate = function(offset) {
    previousCommandOffset += offset;

    if (previousCommandOffset < 0) {
      previousCommandOffset = -1;
      return null;
    }

    if (previousCommandOffset >= this.previousCommands.length) {
      previousCommandOffset = this.previousCommands.length;
      return null;
    }

    return this.previousCommands[previousCommandOffset];
  }
}

function Autocomplete(_words, prefix) {
  this.words = prepareWords(_words);
  this.current = -1;
  this.left = 0; // [left, right)
  this.right = this.words.length;
  this.confirmed = false;

  function createSpan(label, className) {
    var el = document.createElement('span');
    addClass(el, className);
    el.innerText = label;
    return el;
  }

  function prepareWords(words) {
    // convert into an object with priority and element
    var res = new Array(words.length);
    for (var i = 0, ind = 0; i < words.length; ++i) {
      res[i] = new Array(words[i].length);
      for (var j = 0; j < words[i].length; ++j) {
        res[i][j] = {
          word: words[i][j],
          priority: i,
          element: createSpan(words[i][j], 'trimmed keyword')
        };
      }
    }
    // flatten and sort by alphabetical order to refine incrementally
    res = flatten(res);
    res.sort(function(a, b) { return a.word == b.word ? 0 : (a.word < b.word ? -1 : 1); });
    for (var i = 0; i < res.length; ++i) res[i].element.dataset.index = i;
    return res;
  }

  this.view = document.createElement('pre');
  addClass(this.view, 'auto-complete console-message');
  this.view.appendChild(this.prefix = createSpan('...', 'trimmed keyword'));
  this.view.appendChild(this.stage = document.createElement('span'));
  this.elements = this.stage.children;
  this.view.appendChild(this.suffix = createSpan('...', 'trimmed keyword'));

  this.refine(prefix || '');
}

Autocomplete.prototype.getSelectedWord = function() {
  return this.lastSelected && this.lastSelected.innerText;
};

Autocomplete.prototype.onFinished = function(callback) {
  this.onFinishedCallback = callback;
  if (this.confirmed) callback(this.confirmed);
};

Autocomplete.prototype.onKeyDown = function(ev) {
  var self = this;
  if (!this.elements.length) return;

  function move(nextCurrent) {
    if (self.lastSelected) removeClass(self.lastSelected, 'selected');
    addClass(self.lastSelected = self.elements[nextCurrent], 'selected');
    self.trim(self.current, true);
    self.trim(nextCurrent, false);
    self.current = nextCurrent;
  }

  switch (ev.keyCode) {
    case 69:
      if (ev.ctrlKey) {
        move(this.current + 1 >= this.elements.length ? 0 : this.current + 1);
        return true;
      }
      return false;
    case 9: // Tab
      if (ev.shiftKey) { // move back
        move(this.current - 1 < 0 ? this.elements.length - 1 : this.current - 1);
      } else { // move next
        move(this.current + 1 >= this.elements.length ? 0 : this.current + 1);
      }
      return true;
    case 13: // Enter
      this.finish();
      return true;
    case 27: // Esc
      this.cancel();
      return true;
    case 37: case 38: case 39: case 40: // disable using arrow keys on completing
      return true;
  }

  return false;
};

Autocomplete.prototype.trim = function(from, needToTrim) {
  var self = this;
  var num = 5;

  if (this.elements.length > num) {
    (0 < from ? removeClass : addClass)(this.prefix, 'trimmed');
    (from + num < this.elements.length ? removeClass : addClass)(this.suffix, 'trimmed');
  } else {
    addClass(this.prefix, 'trimmed');
    addClass(this.suffix, 'trimmed');
  }

  function iterate(x) {
    for (var i = 0; i < num; ++i, ++x) if (0 <= x && x < self.elements.length) {
      toggleClass(self.elements[x], 'trimmed');
    }
  }

  var toggleClass = needToTrim ? addClass : removeClass;
  if (from < 0) {
    iterate(0);
  } else if (from + num - 1 >= this.elements.length) {
    iterate(this.elements.length - num);
  } else {
    iterate(from);
  }
};

Autocomplete.prototype.refine = function(prefix) {
  if (this.confirmed) return;
  var inc = !this.prev || (prefix.length >= this.prev.length);
  this.prev = prefix;
  var self = this;

  function remove(parent, child) {
    if (parent == child.parentNode) parent.removeChild(child);
  }

  function toggle(el) {
    return inc ? remove(self.stage, el) : self.stage.appendChild(el);
  }

  function startsWith(str, prefix) {
    return !prefix || str.substr(0, prefix.length) === prefix;
  }

  function moveRight(l, r) {
    while (l < r && inc !== startsWith(self.words[l].word, prefix)) toggle(self.words[l++].element);
    return l;
  }

  function moveLeft(l, r) {
    while (l < r - 1 && inc !== startsWith(self.words[r-1].word, prefix)) toggle(self.words[--r].element);
    return r;
  }

  self.trim(self.current, true); // reset trimming

  // Refine the range of words having same prefix
  if (inc) {
    self.left = moveRight(self.left, self.right);
    self.right = moveLeft(self.left, self.right);
  } else {
    self.left = moveLeft(-1, self.left);
    self.right = moveRight(self.right, self.words.length);
  }

  // Render elements with sorting by scope groups
  var words = this.words.slice(this.left, this.right);
  words.sort(function(a, b) { return a.priority == b.priority ? (a.word < b.word ? -1 : 1) : (a.priority < b.priority ? -1 : 1); });
  removeAllChildren(this.elements);
  for (var i = 0; i < words.length; ++i) {
    this.stage.appendChild(words[i].element);
  }

  // Keep a previous selected element if the refined range includes the element
  if (this.lastSelected && this.left <= this.lastSelected.dataset.index && this.lastSelected.dataset.index < this.right) {
    this.current = Array.prototype.indexOf.call(this.elements, this.lastSelected);
    this.trim(this.current, false);
  } else {
    if (this.lastSelected) removeClass(this.lastSelected, 'selected');
    this.lastSelected = null;
    this.current = -1;
    this.trim(0, false);
  }

  if (self.left + 1 == self.right) {
    self.current = 0;
    self.finish();
  } else if (self.left == self.right) {
    self.cancel();
  }
};

Autocomplete.prototype.finish = function() {
  if (0 <= this.current && this.current < this.elements.length) {
    this.confirmed = this.elements[this.current].innerText;
    if (this.onFinishedCallback) this.onFinishedCallback(this.confirmed);
    this.removeView();
  } else {
    this.cancel();
  }
};

Autocomplete.prototype.cancel = function() {
  if (this.onFinishedCallback) this.onFinishedCallback();
  this.removeView();
};

Autocomplete.prototype.removeView = function() {
  if (this.view.parentNode) this.view.parentNode.removeChild(this.view);
  removeAllChildren(this.view);
}

// HTML strings for dynamic elements.
var consoleInnerHtml = "<div class=\'resizer layer\'><\/div>\n<div class=\'console-outer layer\'>\n  <div class=\'console-actions\'>\n    <div class=\'close-button button\' title=\'close\'>x<\/div>\n  <\/div>\n  <div class=\'console-inner\'><\/div>\n<\/div>\n<input class=\'clipboard\' type=\'text\'>\n"
;
var promptBoxHtml = "<span class=\'console-prompt-label\'><\/span>\n<pre class=\'console-prompt-display\'><\/pre>\n"
;
// CSS
var consoleStyleCss = ".console .pos-absolute { position: absolute; }\n.console .pos-fixed { position: fixed; }\n.console .pos-right { right: 0; }\n.console .border-box { box-sizing: border-box; }\n.console .layer { width: 100%; height: 100%; }\n.console .layer.console-outer { z-index: 1; }\n.console .layer.resizer { z-index: 2; }\n.console { position: fixed; left: 0; bottom: 0; width: 100%; height: 148px; padding: 0; margin: 0; background: none repeat scroll 0% 0% #333; z-index: 9999; }\n.console .console-outer { overflow: auto; padding-top: 4px; }\n.console .console-inner { font-family: monospace; font-size: 11px; width: 100%; height: 100%; overflow: none; background: #333; }\n.console .console-prompt-box { color: #FFF; }\n.console .console-message { color: #1AD027; margin: 0; border: 0; white-space: pre-wrap; background-color: #333; padding: 0; }\n.console .console-message.error-message { color: #FC9; }\n.console .console-message.notification-message { color: #99F; }\n.console .console-message.auto-complete { word-break: break-all; }\n.console .console-message.auto-complete .keyword { margin-right: 11px; }\n.console .console-message.auto-complete .keyword.selected { background: #FFF; color: #000; }\n.console .console-message.auto-complete .hidden { display: none; }\n.console .console-message.auto-complete .trimmed { display: none; }\n.console .console-hint { color: #096; }\n.console .console-focus .console-cursor { background: #FEFEFE; color: #333; font-weight: bold; }\n.console .resizer { background: #333; width: 100%; height: 4px; cursor: ns-resize; }\n.console .console-actions { padding-right: 3px; }\n.console .console-actions .button { float: left; }\n.console .button { cursor: pointer; border-radius: 1px; font-family: monospace; font-size: 13px; width: 14px; height: 14px; line-height: 14px; text-align: center; color: #CCC; }\n.console .button:hover { background: #666; color: #FFF; }\n.console .button.close-button:hover { background: #966; }\n.console .clipboard { height: 0px; padding: 0px; margin: 0px; width: 0px; margin-left: -1000px; }\n.console .console-prompt-label { display: inline; color: #FFF; background: none repeat scroll 0% 0% #333; border: 0; padding: 0; }\n.console .console-prompt-display { display: inline; color: #FFF; background: none repeat scroll 0% 0% #333; border: 0; padding: 0; }\n.console.full-screen { height: 100%; }\n.console.full-screen .console-outer { padding-top: 3px; }\n.console.full-screen .resizer { display: none; }\n.console.full-screen .close-button { display: none; }\n"
;
// Insert a style element with the unique ID
var styleElementId = 'sr02459pvbvrmhco';

// REPLConsole Constructor
function REPLConsole(config) {
  function getConfig(key, defaultValue) {
    return config && config[key] || defaultValue;
  }

  this.commandStorage = new CommandStorage();
  this.prompt = getConfig('promptLabel', ' >>');
  this.mountPoint = getConfig('mountPoint');
  this.sessionId = getConfig('sessionId');
  this.autocomplete = false;
}

REPLConsole.prototype.getSessionUrl = function(path) {
  var parts = [ this.mountPoint, 'repl_sessions', this.sessionId ];
  if (path) {
    parts.push(path);
  }
  // Join and remove duplicate slashes.
  return parts.join('/').replace(/([^:]\/)\/+/g, '$1');
};

REPLConsole.prototype.contextRequest = function(keyword, callback) {
  putRequest(this.getSessionUrl(), 'context=' + getContext(keyword), function(xhr) {
    if (xhr.status == 200) {
      callback(null, JSON.parse(xhr.responseText));
    } else {
      callback(xhr.statusText);
    }
  });
};

REPLConsole.prototype.commandHandle = function(line, callback) {
  var self = this;
  var params = 'input=' + encodeURIComponent(line);
  callback = callback || function() {};

  function isSuccess(status) {
    return status >= 200 && status < 300 || status === 304;
  }

  function parseJSON(text) {
    try {
      return JSON.parse(text);
    } catch (e) {
      return null;
    }
  }

  function getErrorText(xhr) {
    if (!xhr.status) {
      return "Connection Refused";
    } else {
      return xhr.status + ' ' + xhr.statusText;
    }
  }

  putRequest(self.getSessionUrl(), params, function(xhr) {
    var response = parseJSON(xhr.responseText);
    var result   = isSuccess(xhr.status);
    if (result) {
      self.writeOutput(response.output);
    } else {
      if (response && response.output) {
        self.writeError(response.output);
      } else {
        self.writeError(getErrorText(xhr));
      }
    }
    callback(result, response);
  });
};

REPLConsole.prototype.uninstall = function() {
  this.container.parentNode.removeChild(this.container);
};

REPLConsole.prototype.install = function(container) {
  var _this = this;

  document.onkeydown = function(ev) {
    if (_this.focused) { _this.onKeyDown(ev); }
  };

  document.onkeypress = function(ev) {
    if (_this.focused) { _this.onKeyPress(ev); }
  };

  document.addEventListener('mousedown', function(ev) {
    var el = ev.target || ev.srcElement;

    if (el) {
      do {
        if (el === container) {
          _this.focus();
          return;
        }
      } while (el = el.parentNode);

      _this.blur();
    }
  });

  // Render the console.
  container.innerHTML = consoleInnerHtml;

  var consoleOuter = findChild(container, 'console-outer');
  var consoleActions = findChild(consoleOuter, 'console-actions');

  addClass(container, 'console');
  addClass(container.getElementsByClassName('layer'), 'pos-absolute border-box');
  addClass(container.getElementsByClassName('button'), 'border-box');
  addClass(consoleActions, 'pos-fixed pos-right');

  // Make the console resizable.
  function resizeContainer(ev) {
    var startY              = ev.clientY;
    var startHeight         = parseInt(document.defaultView.getComputedStyle(container).height, 10);
    var scrollTopStart      = consoleOuter.scrollTop;
    var clientHeightStart   = consoleOuter.clientHeight;

    var doDrag = function(e) {
      container.style.height = (startHeight + startY - e.clientY) + 'px';
      consoleOuter.scrollTop = scrollTopStart + (clientHeightStart - consoleOuter.clientHeight);
      shiftConsoleActions();
    };

    var stopDrag = function(e) {
      document.documentElement.removeEventListener('mousemove', doDrag, false);
      document.documentElement.removeEventListener('mouseup', stopDrag, false);
    };

    document.documentElement.addEventListener('mousemove', doDrag, false);
    document.documentElement.addEventListener('mouseup', stopDrag, false);
  }

  function closeContainer(ev) {
    container.parentNode.removeChild(container);
  }

  var shifted = false;
  function shiftConsoleActions() {
    if (consoleOuter.scrollHeight > consoleOuter.clientHeight) {
      var widthDiff = document.documentElement.clientWidth - consoleOuter.clientWidth;
      if (shifted || ! widthDiff) return;
      shifted = true;
      consoleActions.style.marginRight = widthDiff + 'px';
    } else if (shifted) {
      shifted = false;
      consoleActions.style.marginRight = '0px';
    }
  }

  // Initialize
  this.container = container;
  this.outer = consoleOuter;
  this.inner = findChild(this.outer, 'console-inner');
  this.clipboard = findChild(container, 'clipboard');
  this.suggestWait = 1500;
  this.newPromptBox();
  this.insertCss();

  findChild(container, 'resizer').addEventListener('mousedown', resizeContainer);
  findChild(consoleActions, 'close-button').addEventListener('click', closeContainer);
  consoleOuter.addEventListener('DOMNodeInserted', shiftConsoleActions);

  REPLConsole.currentSession = this;
};

// Add CSS styles dynamically. This probably doesnt work for IE <8.
REPLConsole.prototype.insertCss = function() {
  if (document.getElementById(styleElementId)) {
    return; // already inserted
  }
  var style = document.createElement('style');
  style.type = 'text/css';
  style.innerHTML = consoleStyleCss;
  style.id = styleElementId;
  document.getElementsByTagName('head')[0].appendChild(style);
};

REPLConsole.prototype.focus = function() {
  if (! this.focused) {
    this.focused = true;
    if (! hasClass(this.inner, "console-focus")) {
      addClass(this.inner, "console-focus");
    }
    this.scrollToBottom();
  }
};

REPLConsole.prototype.blur = function() {
  this.focused = false;
  removeClass(this.inner, "console-focus");
};

/**
 * Add a new empty prompt box to the console.
 */
REPLConsole.prototype.newPromptBox = function() {
  // Remove the caret from previous prompt display if any.
  if (this.promptDisplay) {
    this.removeCaretFromPrompt();
  }

  var promptBox = document.createElement('div');
  promptBox.className = "console-prompt-box";
  promptBox.innerHTML = promptBoxHtml;
  this.promptLabel = promptBox.getElementsByClassName('console-prompt-label')[0];
  this.promptDisplay = promptBox.getElementsByClassName('console-prompt-display')[0];
  // Render the prompt box
  this.setInput("");
  this.promptLabel.innerHTML = this.prompt;
  this.inner.appendChild(promptBox);
  this.scrollToBottom();
};

/**
 * Remove the caret from the prompt box,
 * mainly before adding a new prompt box.
 * For simplicity, just re-render the prompt box
 * with caret position -1.
 */
REPLConsole.prototype.removeCaretFromPrompt = function() {
  this.setInput(this._input, -1);
};

REPLConsole.prototype.getSuggestion = function(keyword) {
  var self = this;

  function show(found) {
    if (!found) return;
    var hint = self.promptDisplay.childNodes[1];
    hint.className = 'console-hint';
    hint.dataset.keyword = found;
    hint.innerText = found.substr(self.suggestKeyword.length);
    // clear hinting information after timeout in a few time
    if (self.suggestTimeout) clearTimeout(self.suggestTimeout);
    self.suggestTimeout = setTimeout(function() { self.renderInput() }, self.suggestWait);
  }

  function find(context) {
    var k = self.suggestKeyword;
    for (var i = 0; i < context.length; ++i) if (context[i].substr(0, k.length) === k) {
      if (context[i] === k) return;
      return context[i];
    }
  }

  function request(keyword, callback) {
    self.contextRequest(keyword, function(err, res) {
      if (err) throw new Error(err);
      var c = flatten(res['context']);
      c.sort();
      callback(c);
    });
  }

  self.suggestKeyword = keyword;
  var input = getContext(keyword);
  if (keyword.length - input.length < 3) return;

  if (self.suggestInput !== input) {
    self.suggestInput = input;
    request(keyword, function(c) {
      show(find(self.suggestContext = c));
    });
  } else if (self.suggestContext) {
    show(find(self.suggestContext));
  }
};

REPLConsole.prototype.getHintKeyword = function() {
  var hint = this.promptDisplay.childNodes[1];
  return hint.className === 'console-hint' && hint.dataset.keyword;
};

REPLConsole.prototype.setInput = function(input, caretPos) {
  if (input == null) return; // keep value if input is undefined
  this._caretPos = caretPos === undefined ? input.length : caretPos;
  this._input = input;
  if (this.autocomplete) this.autocomplete.refine(this.getCurrentWord());
  this.renderInput();
  if (!this.autocomplete && input.length == this._caretPos) this.getSuggestion(this.getCurrentWord());
};

/**
 * Add some text to the existing input.
 */
REPLConsole.prototype.addToInput = function(val, caretPos) {
  caretPos = caretPos || this._caretPos;
  var before = this._input.substring(0, caretPos);
  var after = this._input.substring(caretPos, this._input.length);
  var newInput =  before + val + after;
  this.setInput(newInput, caretPos + val.length);
};

/**
 * Render the input prompt. This is called whenever
 * the user input changes, sometimes not very efficient.
 */
REPLConsole.prototype.renderInput = function() {
  // Clear the current input.
  removeAllChildren(this.promptDisplay);

  var before, current, after;
  var center = document.createElement('span');

  if (this._caretPos < 0) {
    before = this._input;
    current = after = "";
  } else if (this._caretPos === this._input.length) {
    before = this._input;
    current = "\u00A0";
    after = "";
  } else {
    before = this._input.substring(0, this._caretPos);
    current = this._input.charAt(this._caretPos);
    after = this._input.substring(this._caretPos + 1, this._input.length);
  }

  this.promptDisplay.appendChild(document.createTextNode(before));
  this.promptDisplay.appendChild(center);
  this.promptDisplay.appendChild(document.createTextNode(after));

  var hint = this.autocomplete && this.autocomplete.getSelectedWord();
  addClass(center, hint ? 'console-hint' : 'console-cursor');
  center.appendChild(document.createTextNode(hint ? hint.substr(this.getCurrentWord().length) : current));
};

REPLConsole.prototype.writeOutput = function(output) {
  var consoleMessage = document.createElement('pre');
  consoleMessage.className = "console-message";
  consoleMessage.innerHTML = escapeHTML(output);
  this.inner.appendChild(consoleMessage);
  this.newPromptBox();
  return consoleMessage;
};

REPLConsole.prototype.writeError = function(output) {
  var consoleMessage = this.writeOutput(output);
  addClass(consoleMessage, "error-message");
  return consoleMessage;
};

REPLConsole.prototype.writeNotification = function(output) {
  var consoleMessage = this.writeOutput(output);
  addClass(consoleMessage, "notification-message");
  return consoleMessage;
};

REPLConsole.prototype.onEnterKey = function() {
  var input = this._input;

  if(input != "" && input !== undefined) {
    this.commandStorage.addCommand(input);
  }

  this.commandHandle(input);
};

REPLConsole.prototype.onTabKey = function() {
  var self = this;

  var hintKeyword;
  if (hintKeyword = self.getHintKeyword()) {
    self.swapCurrentWord(hintKeyword);
    return;
  }

  if (self.autocomplete) return;
  self.autocomplete = new Autocomplete([]);

  self.contextRequest(self.getCurrentWord(), function(err, obj) {
    if (err) return self.autocomplete = false;
    self.autocomplete = new Autocomplete(obj['context'], self.getCurrentWord());
    self.inner.appendChild(self.autocomplete.view);
    self.autocomplete.onFinished(function(word) {
      self.swapCurrentWord(word);
      self.autocomplete = false;
    });
    self.scrollToBottom();
  });
};

REPLConsole.prototype.onNavigateHistory = function(offset) {
  var command = this.commandStorage.navigate(offset) || "";
  this.setInput(command);
};

/**
 * Handle control keys like up, down, left, right.
 */
REPLConsole.prototype.onKeyDown = function(ev) {
  if (this.autocomplete && this.autocomplete.onKeyDown(ev)) {
    this.renderInput();
    ev.preventDefault();
    ev.stopPropagation();
    return;
  }

  switch (ev.keyCode) {
    case 65: // Ctrl-A
      if (ev.ctrlKey) {
        this.setInput(this._input, 0);
        ev.preventDefault();
      }
      break;

    case 69: // Ctrl-E
      if (ev.ctrlKey) {
        this.onTabKey();
        ev.preventDefault();
      }
      break;

    case 87: // Ctrl-W
      if (ev.ctrlKey) {
        this.deleteWord();
        ev.preventDefault();
      }
      break;

    case 85: // Ctrl-U
      if (ev.ctrlKey) {
        this.deleteLine();
        ev.preventDefault();
      }
      break;

    case 69: // Ctrl-E
      if (ev.ctrlKey) {
        this.onTabKey();
        ev.preventDefault();
      }
      break;

    case 80: // Ctrl-P
      if (! ev.ctrlKey) break;

    case 78: // Ctrl-N
      if (! ev.ctrlKey) break;

    case 9: // Tab
      this.onTabKey();
      ev.preventDefault();
      break;

    case 13: // Enter key
      this.onEnterKey();
      ev.preventDefault();
      break;

    case 38: // Up arrow
      this.onNavigateHistory(-1);
      ev.preventDefault();
      break;

    case 40: // Down arrow
      this.onNavigateHistory(1);
      ev.preventDefault();
      break;

    case 37: // Left arrow
      var caretPos = this._caretPos > 0 ? this._caretPos - 1 : this._caretPos;
      this.setInput(this._input, caretPos);
      ev.preventDefault();
      break;

    case 39: // Right arrow
      var length = this._input.length;
      var caretPos = this._caretPos < length ? this._caretPos + 1 : this._caretPos;
      this.setInput(this._input, caretPos);
      ev.preventDefault();
      break;

    case 8: // Delete
      this.deleteAtCurrent();
      ev.preventDefault();
      break;

    default:
      break;
  }

  if (ev.ctrlKey || ev.metaKey) {
    if (ev.keyCode == 86) {
      // Set focus to our clipboard when they hit the "v" key
      this.clipboard.focus();

      // Pasting to clipboard doesn't happen immediately,
      // so we have to wait for a while to get the pasted text.
      var _this = this;
      setTimeout(function() {
        _this.addToInput(_this.clipboard.value);
        _this.clipboard.value = "";
        _this.clipboard.blur();
      }, 10);
    }
  }

  ev.stopPropagation();
};

/**
 * Handle input key press.
 */
REPLConsole.prototype.onKeyPress = function(ev) {
  // Only write to the console if it's a single key press.
  if (ev.ctrlKey && !ev.altKey || ev.metaKey) { return; }
  var keyCode = ev.keyCode || ev.which;
  this.insertAtCurrent(String.fromCharCode(keyCode));
  ev.stopPropagation();
  ev.preventDefault();
};

/**
 * Delete a character at the current position.
 */
REPLConsole.prototype.deleteAtCurrent = function() {
  if (this._caretPos > 0) {
    var caretPos = this._caretPos - 1;
    var before = this._input.substring(0, caretPos);
    var after = this._input.substring(this._caretPos, this._input.length);
    this.setInput(before + after, caretPos);

    if (!this._input) {
      this.autocomplete && this.autocomplete.cancel();
      this.autocomplete = false;
    }
  }
};

/**
 * Deletes the current line.
 */
REPLConsole.prototype.deleteLine = function() {
  if (this._caretPos > 0) {
    this.setInput("", 0);

    if (!this._input) {
      this.autocomplete && this.autocomplete.cancel();
      this.autocomplete = false;
    }
  }
};

/**
 * Deletes the current word.
 */
REPLConsole.prototype.deleteWord = function() {
  if (this._caretPos > 0) {
    var i = 1, current = this._caretPos;
    while (this._input[current - i++] == " ");

    var deleteIndex = 0;
    for (; current - i > 0; i++) {
      if (this._input[current - i] == " ") {
        deleteIndex = current - i;
        break;
      }
    }

    var before = this._input.substring(0, deleteIndex);
    var after = this._input.substring(current, this._input.length);
    this.setInput(before + after, deleteIndex);

    if (!this._input) {
      this.autocomplete && this.autocomplete.cancel();
      this.autocomplete = false;
    }
  }
};

/**
 * Insert a character at the current position.
 */
REPLConsole.prototype.insertAtCurrent = function(char) {
  var before = this._input.substring(0, this._caretPos);
  var after = this._input.substring(this._caretPos, this._input.length);
  this.setInput(before + char + after, this._caretPos + 1);
};

REPLConsole.prototype.swapCurrentWord = function(next) {
  function right(s, pos) {
    var x = s.indexOf(' ', pos);
    return x === -1 ? s.length : x;
  }

  function swap(s, pos) {
    return s.substr(0, s.lastIndexOf(' ', pos) + 1) + next + s.substr(right(s, pos))
  }

  if (!next) return;
  var swapped = swap(this._input, this._caretPos);
  this.setInput(swapped, this._caretPos + swapped.length - this._input.length);
};

REPLConsole.prototype.getCurrentWord = function() {
  return (function(s, pos) {
    var left = s.lastIndexOf(' ', pos);
    if (left === -1) left = 0;
    var right = s.indexOf(' ', pos)
    if (right === -1) right = s.length - 1;
    return s.substr(left, right - left + 1).replace(/^\s+|\s+$/g,'');
  })(this._input, this._caretPos);
};

REPLConsole.prototype.scrollToBottom = function() {
  this.outer.scrollTop = this.outer.scrollHeight;
};

// Change the binding of the console.
REPLConsole.prototype.switchBindingTo = function(frameId, callback) {
  var url = this.getSessionUrl('trace');
  var params = "frame_id=" + encodeURIComponent(frameId);

  var _this = this;
  postRequest(url, params, function() {
    var text = "Context has changed to: " + callback();
    _this.writeNotification(text);
  });
};

/**
 * Install the console into the element with a specific ID.
 * Example: REPLConsole.installInto("target-id")
 */
REPLConsole.installInto = function(id, options) {
  var consoleElement = document.getElementById(id);

  options = options || {};

  for (var prop in consoleElement.dataset) {
    options[prop] = options[prop] || consoleElement.dataset[prop];
  }

  var replConsole = new REPLConsole(options);
  replConsole.install(consoleElement);
  return replConsole;
};

// This is to store the latest single session, and the stored session
// is updated by the REPLConsole#install() method.
// It allows to operate the current session from the other scripts.
REPLConsole.currentSession = null;

// This line is for the Firefox Add-on, because it doesn't have XMLHttpRequest as default.
// And so we need to require a module compatible with XMLHttpRequest from SDK.
REPLConsole.XMLHttpRequest = typeof XMLHttpRequest === 'undefined' ? null : XMLHttpRequest;

REPLConsole.request = function request(method, url, params, callback) {
  var xhr = new REPLConsole.XMLHttpRequest();

  xhr.open(method, url, true);
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
  xhr.setRequestHeader("Accept", "application/vnd.web-console.v2");
  xhr.send(params);

  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {
      callback(xhr);
    }
  };
};

// DOM helpers
function hasClass(el, className) {
  var regex = new RegExp('(?:^|\\s)' + className + '(?!\\S)', 'g');
  return el.className && el.className.match(regex);
}

function isNodeList(el) {
  return typeof el.length === 'number' &&
    typeof el.item === 'function';
}

function addClass(el, className) {
  if (isNodeList(el)) {
    for (var i = 0; i < el.length; ++ i) {
      addClass(el[i], className);
    }
  } else if (!hasClass(el, className)) {
    el.className += " " + className;
  }
}

function removeClass(el, className) {
  var regex = new RegExp('(?:^|\\s)' + className + '(?!\\S)', 'g');
  el.className = el.className.replace(regex, '');
}

function removeAllChildren(el) {
  while (el.firstChild) {
    el.removeChild(el.firstChild);
  }
}

function findChild(el, className) {
  for (var i = 0; i < el.childNodes.length; ++ i) {
    if (hasClass(el.childNodes[i], className)) {
      return el.childNodes[i];
    }
  }
}

function escapeHTML(html) {
  return html
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/`/g, '&#x60;');
}

// XHR helpers
function postRequest() {
  REPLConsole.request.apply(this, ["POST"].concat([].slice.call(arguments)));
}

function putRequest() {
  REPLConsole.request.apply(this, ["PUT"].concat([].slice.call(arguments)));
}

if (typeof exports === 'object') {
  exports.REPLConsole = REPLConsole;
} else {
  window.REPLConsole = REPLConsole;
}

// Split string by module operators of ruby
function getContext(s) {
  var methodOp = s.lastIndexOf('.');
  var moduleOp = s.lastIndexOf('::');
  var x = methodOp > moduleOp ? methodOp : moduleOp;
  return x !== -1 ? s.substr(0, x) : '';
}

function flatten(arrays) {
  return Array.prototype.concat.apply([], arrays);
}

}).call(this);
</script>

<script type="text/javascript" data-template="main">
(function() {
  REPLConsole.installInto('console');

}).call(this);
</script>


  <script type="text/javascript" data-template="error_page">
(function() {
  // Try intercept traces links in Rails 4.2.
var traceFrames = document.getElementsByClassName('trace-frames');
var selectedFrame, currentSource = document.getElementById('frame-source-0');

// Add click listeners for all stack frames
for (var i = 0; i < traceFrames.length; i++) {
  traceFrames[i].addEventListener('click', function(e) {
    e.preventDefault();
    var target = e.target;
    var frameId = target.dataset.frameId;

    // Change the binding of the console.
    changeBinding(frameId, function() {
      // Rails already handles toggling the select class
      selectedFrame = target;
      return target.innerHTML;
    });

    // Change the extracted source code
    changeSourceExtract(frameId);
  });
}

// Change the binding of the current session and prompt the user.
function changeBinding(frameId, callback) {
  REPLConsole.currentSession.switchBindingTo(frameId, callback);
}

function changeSourceExtract(frameId) {
  var el = document.getElementById('frame-source-' + frameId);
  if (currentSource && el) {
    currentSource.className += " hidden";
    el.className = el.className.replace(" hidden", "");
    currentSource = el;
  }
}

// Push the error page body upwards the size of the console.
//
// While, I wouldn't like to do that on every custom page (so I don't screw
// user's layouts), I think a lot of developers want to see all of the content
// on the default Rails error page.
//
// Since it's quite special as is now, being a bit more special in the name of
// better user experience, won't hurt.
document.addEventListener('DOMContentLoaded', function() {
  var consoleElement = document.getElementById('console');
  var resizerElement = consoleElement.getElementsByClassName('resizer')[0];
  var containerElement = document.getElementById('container');

  function setContainerElementBottomMargin(pixels) {
    containerElement.style.marginBottom = pixels + 'px';
  }

  var currentConsoleElementHeight = consoleElement.offsetHeight;
  setContainerElementBottomMargin(currentConsoleElementHeight);

  resizerElement.addEventListener('mousedown', function(event) {
    function recordConsoleElementHeight(event) {
      resizerElement.removeEventListener('mouseup', recordConsoleElementHeight);

      var currentConsoleElementHeight = consoleElement.offsetHeight;
      setContainerElementBottomMargin(currentConsoleElementHeight);
    }

    resizerElement.addEventListener('mouseup', recordConsoleElementHeight);
  });
});

}).call(this);
</script>




<div id="sa-extension-is-installed" data-id="amjmjholfoknokffkiolahocokcaecnc"></div></body></html>